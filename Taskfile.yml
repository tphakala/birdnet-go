version: '3'

vars:
  BINARY_DIR: bin
  BINARY_NAME: birdnet-go
  TFLITE_VERSION: v2.17.1
  TAILWIND_INPUT: tailwind.input.css
  TAILWIND_OUTPUT: assets/tailwind.css
  LABELS_DIR: internal/birdnet/data/labels
  AVICOMMONS_DATA_DIR: internal/imageprovider/data
  AVICOMMONS_JSON_FILE: latest.json
  AVICOMMONS_JSON_URL: https://avicommons.org/latest.json
  BUILD_DATE:
    sh: date -u +%Y-%m-%dT%H:%M:%SZ
  VERSION:
    sh: |
      if [ ! -z "$BUILD_VERSION" ]; then
        echo "$BUILD_VERSION"
      else
        git describe --tags --always 2>/dev/null || echo "unknown"
      fi
  UNAME_S:
    sh: uname -s
  UNAME_M:
    sh: uname -m
  # Common build flags
  CGO_FLAGS: CGO_ENABLED=1 CGO_CFLAGS="-I$HOME/src/tensorflow"
  BUILD_FLAGS: -ldflags "-s -w -X 'main.buildDate={{.BUILD_DATE}}' -X 'main.version={{.VERSION}}'"
  # System paths
  SYSTEM_LIB_DIR_AMD64: /usr/lib
  SYSTEM_LIB_DIR_ARM64: /usr/aarch64-linux-gnu/lib

tasks:
  default:
    deps: [native-target]

  # Task for running tests
  test:
    desc: Run tests for the application
    cmds:
      - go test ./... {{.TEST_FLAGS}}
    vars:
      TEST_FLAGS: '{{default "" .CLI_ARGS}}'

  # Task for running tests with verbose output
  test-verbose:
    desc: Run tests with verbose output
    cmds:
      - task: test
        vars: {CLI_ARGS: "-v"}

  # Task for running tests with coverage report
  test-coverage:
    desc: Run tests with coverage report
    cmds:
      - mkdir -p coverage
      - go test ./... -coverprofile=coverage/coverage.out {{.TEST_FLAGS}}
      - go tool cover -html=coverage/coverage.out -o coverage/coverage.html
    vars:
      TEST_FLAGS: '{{default "" .CLI_ARGS}}'

  # New Task: Download Avicommons Data
  download-avicommons-data:
    desc: Download the Avicommons latest.json data file if it doesn't exist
    dir: '{{.AVICOMMONS_DATA_DIR}}'
    cmds:
      - mkdir -p {{.AVICOMMONS_DATA_DIR}}
      - |
        if [ ! -f "{{.AVICOMMONS_JSON_FILE}}" ]; then
          echo "Downloading Avicommons data file ({{.AVICOMMONS_JSON_FILE}})..."
          # Use curl with -fL to fail on error and follow redirects
          curl -fL -o "{{.AVICOMMONS_JSON_FILE}}" "{{.AVICOMMONS_JSON_URL}}"
        else
          echo "Avicommons data file ({{.AVICOMMONS_JSON_FILE}}) already exists."
        fi
    status:
      - '[ -f "{{.AVICOMMONS_JSON_FILE}}" ]'

  native-target:
    cmds:
      - |
        if [ "{{.OS}}" = "unsupported" ] || [ "{{.ARCH}}" = "unsupported" ]; then
          echo "Error: Unsupported platform combination: OS={{.OS}}, ARCH={{.ARCH}}"
          exit 1
        fi
      - task: "{{OS}}_{{ARCH}}"
    vars:
      OS:
        sh: |
          case "{{.UNAME_S}}" in
            Linux) echo "linux";;
            Darwin) echo "darwin";;
            *) echo "unsupported";;
          esac
      ARCH:
        sh: |
          case "{{.UNAME_M}}" in
            x86_64) echo "amd64";;
            aarch64|arm64) echo "arm64";;
            *) echo "unsupported";;
          esac

  setup-dev:
    desc: Setup development environment on Linux (apt) or macOS (homebrew)
    cmds:
      - task: detect-and-install-deps
      - task: install-go-tools
      - task: setup-frontend-dev
      - task: check-tensorflow
      - task: verify-dev-setup
      - |
        echo ""
        echo "✅ Development environment setup complete!"
        echo ""
        echo "Next steps:"
        echo "  1. Run 'task' to build the project"
        echo "  2. Run 'task dev_server' for development with hot reload"
        echo "  3. Run 'task frontend-dev' to start frontend dev server"
        echo ""

  detect-and-install-deps:
    desc: Detect OS and install system dependencies
    internal: true
    cmds:
      - |
        echo "🔍 Detecting operating system..."

        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
          echo "📦 Installing dependencies for Linux (apt-based)..."

          # Check if running as root or with sudo
          if [ "$EUID" -ne 0 ]; then
            SUDO="sudo"
          else
            SUDO=""
          fi

          # Update package list
          $SUDO apt-get update

          # Install base development tools
          $SUDO apt-get install -y \
            build-essential \
            git \
            wget \
            curl \
            unzip \
            ca-certificates

          # Install Go if not present or version is too old
          if ! command -v go >/dev/null 2>&1; then
            echo "📥 Installing Go..."
            GO_VERSION="1.25.3"
            wget "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz"
            $SUDO rm -rf /usr/local/go
            $SUDO tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
            rm "go${GO_VERSION}.linux-amd64.tar.gz"

            # Add Go to PATH if not already there
            if ! grep -q "/usr/local/go/bin" ~/.profile 2>/dev/null; then
              echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile
              echo 'export PATH=$PATH:$HOME/go/bin' >> ~/.profile
              echo "⚠️  Please run 'source ~/.profile' or restart your shell"
            fi
            export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
          fi

          # Install Node.js (LTS) if not present
          if ! command -v node >/dev/null 2>&1; then
            echo "📥 Installing Node.js LTS..."
            curl -fsSL https://deb.nodesource.com/setup_lts.x | $SUDO -E bash -
            $SUDO apt-get install -y nodejs
          fi

          # Install cross-compilation toolchains (optional but useful)
          if ! command -v aarch64-linux-gnu-gcc >/dev/null 2>&1; then
            echo "📥 Installing ARM64 cross-compilation tools..."
            $SUDO apt-get install -y gcc-aarch64-linux-gnu
          fi

          # Install task if not present
          if ! command -v task >/dev/null 2>&1; then
            echo "📥 Installing Task (go-task)..."
            sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          fi

        elif [[ "$OSTYPE" == "darwin"* ]]; then
          echo "📦 Installing dependencies for macOS (homebrew)..."

          # Check if homebrew is installed
          if ! command -v brew >/dev/null 2>&1; then
            echo "❌ Homebrew not found. Please install it first:"
            echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
            exit 1
          fi

          # Update homebrew
          brew update

          # Install base tools
          brew install git wget curl

          # Install Go
          if ! command -v go >/dev/null 2>&1; then
            echo "📥 Installing Go..."
            brew install go@1.25
          fi

          # Install Node.js LTS
          if ! command -v node >/dev/null 2>&1; then
            echo "📥 Installing Node.js LTS..."
            brew install node@22
          fi

          # Install task
          if ! command -v task >/dev/null 2>&1; then
            echo "📥 Installing Task (go-task)..."
            brew install go-task
          fi

        else
          echo "❌ Unsupported operating system: $OSTYPE"
          echo "This script supports Linux (apt-based) and macOS (homebrew)"
          exit 1
        fi

        echo "✅ System dependencies installed"

  install-go-tools:
    desc: Install Go development tools
    internal: true
    cmds:
      - |
        echo "🔧 Installing Go development tools..."

        # Install golangci-lint
        if ! command -v golangci-lint >/dev/null 2>&1; then
          echo "📥 Installing golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
        else
          echo "✅ golangci-lint already installed"
        fi

        # Install air for hot reload (optional)
        if ! command -v air >/dev/null 2>&1; then
          echo "📥 Installing air (hot reload)..."
          go install github.com/air-verse/air@latest
        else
          echo "✅ air already installed"
        fi

        # Install mockgen for testing
        if ! command -v mockgen >/dev/null 2>&1; then
          echo "📥 Installing mockgen..."
          go install go.uber.org/mock/mockgen@latest
        else
          echo "✅ mockgen already installed"
        fi

        echo "✅ Go tools installed"

  setup-frontend-dev:
    desc: Setup frontend development environment
    internal: true
    dir: frontend
    cmds:
      - |
        echo "🎨 Setting up frontend development environment..."

        # Install frontend dependencies
        if [ ! -d "node_modules" ]; then
          echo "📥 Installing frontend dependencies..."
          npm install
        else
          echo "✅ Frontend dependencies already installed"
        fi

        # Install Playwright browsers for E2E testing
        echo "📥 Installing Playwright browsers..."
        npx playwright install --with-deps chromium

        echo "✅ Frontend setup complete"

  verify-dev-setup:
    desc: Verify development environment setup
    internal: true
    cmds:
      - |
        echo ""
        echo "🔍 Verifying development environment..."
        echo ""

        # Check Go
        if command -v go >/dev/null 2>&1; then
          echo "✅ Go: $(go version)"
        else
          echo "❌ Go: not found"
          exit 1
        fi

        # Check Node.js
        if command -v node >/dev/null 2>&1; then
          echo "✅ Node.js: $(node --version)"
        else
          echo "❌ Node.js: not found"
          exit 1
        fi

        # Check npm
        if command -v npm >/dev/null 2>&1; then
          echo "✅ npm: $(npm --version)"
        else
          echo "❌ npm: not found"
          exit 1
        fi

        # Check golangci-lint
        if command -v golangci-lint >/dev/null 2>&1; then
          echo "✅ golangci-lint: $(golangci-lint --version | head -n1)"
        else
          echo "⚠️  golangci-lint: not found (optional)"
        fi

        # Check air
        if command -v air >/dev/null 2>&1; then
          echo "✅ air: installed"
        else
          echo "⚠️  air: not found (optional)"
        fi

        # Check task
        if command -v task >/dev/null 2>&1; then
          echo "✅ task: $(task --version)"
        else
          echo "❌ task: not found"
          exit 1
        fi

        # Check git
        if command -v git >/dev/null 2>&1; then
          echo "✅ git: $(git --version)"
        else
          echo "❌ git: not found"
          exit 1
        fi

        # Check frontend dependencies
        if [ -d "frontend/node_modules" ]; then
          echo "✅ Frontend dependencies: installed"
        else
          echo "❌ Frontend dependencies: not installed"
          exit 1
        fi

        echo ""
        echo "✅ All required tools are installed"

  check-tools:
    cmds:
      - |
        for cmd in go unzip git wget; do
          if ! command -v $cmd >/dev/null; then
            echo "$cmd not found. Please install it."
            exit 1
          fi
        done

  check-tensorflow:
    cmds:
      - |
        if [ ! -f "$HOME/src/tensorflow/tensorflow/lite/c/c_api.h" ]; then
          echo "TensorFlow Lite C API header not found. Cloning TensorFlow source..."
          mkdir -vp $HOME/src
          echo "Cloning TensorFlow source..."
          git clone --branch {{.TFLITE_VERSION}} --filter=blob:none --depth 1 https://github.com/tensorflow/tensorflow.git $HOME/src/tensorflow
          echo "Setting up sparse checkout..."
          git -C $HOME/src/tensorflow config core.sparseCheckout true
          echo "**/*.h" >> $HOME/src/tensorflow/.git/info/sparse-checkout
          echo "Checking out TensorFlow source..."
          git -C $HOME/src/tensorflow checkout
        else
          echo "TensorFlow headers already exist at version {{.TFLITE_VERSION}}"
        fi

  download-assets:
    cmds:
      - mkdir -p assets
      - curl -sL https://unpkg.com/leaflet/dist/leaflet.js -o assets/leaflet.js
      - curl -sL https://unpkg.com/leaflet/dist/leaflet.css -o assets/leaflet.css
      - curl -sL https://unpkg.com/htmx.org@2.0 -o assets/htmx.min.js
      - curl -sL https://unpkg.com/alpinejs -o assets/alpinejs.min.js
      - curl -sL https://cdn.jsdelivr.net/npm/hls.js@latest -o assets/hls.min.js
      - curl -sL https://cdn.jsdelivr.net/npm/chart.js@4.4.9/dist/chart.umd.min.js -o assets/chart.min.js
      - curl -sL https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js -o assets/chartjs-adapter-date-fns.bundle.min.js

  generate-tailwindcss:
    cmds:
      - npm -D install daisyui@4.12.24
      - npx --yes tailwindcss@3.4.17 -i {{.TAILWIND_INPUT}} -o {{.TAILWIND_OUTPUT}} --minify

  dev_server:
    cmds:
      - air realtime

  # Frontend build tasks
  frontend-install:
    desc: Install frontend dependencies
    dir: frontend
    cmds:
      - npm install
    sources:
      - package.json
      - package-lock.json
    generates:
      - node_modules/.package-lock.json

  frontend-typecheck:
    desc: Run TypeScript type checking on frontend
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npm run typecheck
    sources:
      - src/**/*
      - tsconfig.json
      - package.json

  frontend-build:
    desc: Build frontend for production with strict type checking
    dir: frontend
    deps: [frontend-install, frontend-typecheck]
    cmds:
      - npm run build
    sources:
      - src/**/*
      - index.html
      - vite.config.js
      - package.json
    generates:
      - dist/**/*

  frontend-dev:
    desc: Start frontend development server
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npm run dev

  frontend-lint:
    desc: Lint frontend code
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npm run check:all

  frontend-lint-fix:
    desc: Fix frontend linting issues automatically
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npm run format
      - npm run lint -- --fix
      - npm run ast:fix

  frontend-ast-fix:
    desc: Auto-fix ast-grep detected issues
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npm run ast:fix

  frontend-test:
    desc: Run frontend tests
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npm run test -- --run

  frontend-test-coverage:
    desc: Run frontend tests with coverage
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npm run test:coverage

  frontend-quality:
    desc: Run comprehensive frontend quality checks and auto-fix issues
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npm run format
      - npm run lint -- --fix
      - npm run ast:fix
      - npm run check:all
      - npm run test:ci
      - npm run audit:security
      - npm run analyze:circular
      - npm run build
      - npm run analyze:bundle:size

  # Format all markdown files with prettier
  format-md:
    desc: Format all markdown files in the project with prettier
    dir: frontend
    deps: [frontend-install]
    cmds:
      - npx prettier --write "../**/*.md"

  # E2E Testing Tasks
  e2e-install:
    desc: Install E2E testing dependencies
    dir: frontend
    cmds:
      - npm install -D @playwright/test playwright @axe-core/playwright
      - npx playwright install

  e2e-test:
    desc: Run end-to-end tests
    dir: frontend
    deps: [frontend-build, e2e-install]
    cmds:
      - npx playwright test

  e2e-test-headed:
    desc: Run E2E tests in headed mode for debugging
    dir: frontend
    cmds:
      - npx playwright test --headed

  e2e-test-ui:
    desc: Run E2E tests with Playwright UI mode
    dir: frontend
    cmds:
      - npx playwright test --ui

  e2e-test-mobile:
    desc: Run E2E tests on mobile devices only
    dir: frontend
    cmds:
      - npx playwright test --grep="mobile|responsive"

  e2e-test-performance:
    desc: Run performance-focused E2E tests
    dir: frontend
    cmds:
      - npx playwright test --grep="performance"

  e2e-report:
    desc: Open E2E test report
    dir: frontend
    cmds:
      - npx playwright show-report

  clean:
    cmds:
      - go clean
      - rm -rf {{.BINARY_DIR}}/* tflite_c *.tar.gz *.zip
      - rm -f {{.AVICOMMONS_DATA_DIR}}/{{.AVICOMMONS_JSON_FILE}}
      - rm -rf frontend/dist frontend/node_modules

  # Non-embedded builds (without embedded models - smaller binary size)
  noembed:
    desc: Build for native platform without embedded models
    deps: [noembed-native-target]

  noembed-native-target:
    cmds:
      - |
        if [ "{{.OS}}" = "unsupported" ] || [ "{{.ARCH}}" = "unsupported" ]; then
          echo "Error: Unsupported platform combination: OS={{.OS}}, ARCH={{.ARCH}}"
          exit 1
        fi
      - task: "noembed_{{OS}}_{{ARCH}}"
    vars:
      OS:
        sh: |
          case "{{.UNAME_S}}" in
            Linux) echo "linux";;
            Darwin) echo "darwin";;
            *) echo "unsupported";;
          esac
      ARCH:
        sh: |
          case "{{.UNAME_M}}" in
            x86_64) echo "amd64";;
            aarch64|arm64) echo "arm64";;
            *) echo "unsupported";;
          esac

  linux_amd64:
    deps: [check-tools, check-tensorflow, download-avicommons-data, frontend-build]
    vars:
      TFLITE_LIB_DIR: '{{.DOCKER_LIB_DIR | default .SYSTEM_LIB_DIR_AMD64}}'
      TFLITE_LIB_ARCH: linux_amd64.tar.gz
      TARGET: linux_amd64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        mkdir -p {{.TFLITE_LIB_DIR}}
        GOOS=linux GOARCH=amd64 {{.CGO_FLAGS}} \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build -trimpath {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}

  linux_arm64:
    deps: [check-tools, check-tensorflow, download-avicommons-data, frontend-build]
    vars:
      TFLITE_LIB_DIR: '{{.DOCKER_LIB_DIR | default .SYSTEM_LIB_DIR_ARM64}}'
      TFLITE_LIB_ARCH: linux_arm64.tar.gz
      TARGET: linux_arm64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        mkdir -p {{.TFLITE_LIB_DIR}}
        if [ "$(uname -m)" != "aarch64" ]; then
          export CC=aarch64-linux-gnu-gcc
        fi
        GOOS=linux GOARCH=arm64 {{.CGO_FLAGS}} \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build -trimpath {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}

  windows_amd64:
    deps: [check-tools, check-tensorflow, download-avicommons-data, frontend-build]
    vars:
      TFLITE_LIB_DIR: /usr/x86_64-w64-mingw32/lib
      TFLITE_LIB_ARCH: windows_amd64.zip
      TARGET: windows_amd64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        GOOS=windows GOARCH=amd64 {{.CGO_FLAGS}} \
        CC=x86_64-w64-mingw32-gcc \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build -trimpath {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}.exe

  darwin_amd64:
    deps: [check-tools, check-tensorflow, download-avicommons-data, frontend-build]
    vars:
      TFLITE_LIB_DIR: /usr/local/lib
      TFLITE_LIB_ARCH: darwin_amd64.tar.gz
      TARGET: darwin_amd64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        GOOS=darwin GOARCH=amd64 {{.CGO_FLAGS}} \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build -trimpath {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}

  darwin_arm64:
    deps: [check-tools, check-tensorflow, download-avicommons-data, frontend-build]
    vars:
      TFLITE_LIB_DIR: /opt/homebrew/lib
      TFLITE_LIB_ARCH: darwin_arm64.tar.gz
      TARGET: darwin_arm64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        GOOS=darwin GOARCH=arm64 {{.CGO_FLAGS}} \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build -trimpath {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}

  download-tflite:
    internal: true
    vars:
      LIB_FILENAME:
        sh: |
          case "{{.TARGET}}" in
            windows_amd64) echo "tensorflowlite_c-${TFLITE_VERSION#v}.dll";;
            linux*) echo "libtensorflowlite_c.so.${TFLITE_VERSION#v}";;
            darwin*) echo "libtensorflowlite_c.${TFLITE_VERSION#v}.dylib";;
          esac
    cmds:
      - |
        if [ ! -f "{{.TFLITE_LIB_DIR}}/{{.LIB_FILENAME}}" ]; then
          echo "TensorFlow Lite C library not found. Downloading..."
          wget -q "https://github.com/tphakala/tflite_c/releases/download/{{.TFLITE_VERSION}}/tflite_c_{{.TFLITE_VERSION}}_{{.TFLITE_LIB_ARCH}}" -P ./
          
          # Only create directory if it doesn't exist
          if [ ! -d "{{.TFLITE_LIB_DIR}}" ]; then
            if [ -w "$(dirname "{{.TFLITE_LIB_DIR}}")" ] 2>/dev/null; then
              mkdir -p "{{.TFLITE_LIB_DIR}}"
            else
              sudo mkdir -p "{{.TFLITE_LIB_DIR}}"
            fi
          fi
          
          if [[ "{{.TFLITE_LIB_ARCH}}" == *.zip ]]; then
            unzip -o "tflite_c_{{.TFLITE_VERSION}}_{{.TFLITE_LIB_ARCH}}"
            if [ -w "{{.TFLITE_LIB_DIR}}" ]; then
              mv "{{.LIB_FILENAME}}" "{{.TFLITE_LIB_DIR}}/"
            else
              sudo mv "{{.LIB_FILENAME}}" "{{.TFLITE_LIB_DIR}}/"
            fi
          else
            tar -xzf "tflite_c_{{.TFLITE_VERSION}}_{{.TFLITE_LIB_ARCH}}"
            if [ -w "{{.TFLITE_LIB_DIR}}" ]; then
              mv "{{.LIB_FILENAME}}" "{{.TFLITE_LIB_DIR}}/"
            else
              sudo mv "{{.LIB_FILENAME}}" "{{.TFLITE_LIB_DIR}}/"
            fi
          fi
          
          rm -f "tflite_c_{{.TFLITE_VERSION}}_{{.TFLITE_LIB_ARCH}}"
        fi
      - task: ensure-tflite-symlinks
        vars: {LIB_DIR: '{{.TFLITE_LIB_DIR}}', LIB_FILENAME: '{{.LIB_FILENAME}}'}

  # Internal task for building noembed binaries across platforms
  noembed_build:
    internal: true
    deps: [check-tools, check-tensorflow, download-avicommons-data, frontend-build]
    cmds:
      - task: download-tflite
        vars: 
          TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}'
          TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}'
          TARGET: '{{.TARGET}}'
      - mkdir -p {{.BINARY_DIR}}
      - |
        {{if .CROSS_COMPILE_CHECK}}
        if [ "$(uname -m)" != "{{.CROSS_COMPILE_CHECK}}" ]; then
          export CC={{.CC}}
        fi
        {{else if .CC}}
        export CC={{.CC}}
        {{end}}
        GOOS={{.GOOS}} GOARCH={{.GOARCH}} {{.CGO_FLAGS}} \
          CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
          go build -trimpath -tags noembed {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}{{.BINARY_SUFFIX}}
        echo "Built non-embedded binary: {{.BINARY_DIR}}/{{.BINARY_NAME}}{{.BINARY_SUFFIX}}"
        echo "Note: This binary requires external model files to run"

  noembed_linux_amd64:
    desc: Build Linux AMD64 without embedded models
    cmds:
      - task: noembed_build
        vars:
          TFLITE_LIB_DIR: '{{.DOCKER_LIB_DIR | default .SYSTEM_LIB_DIR_AMD64}}'
          TFLITE_LIB_ARCH: linux_amd64.tar.gz
          TARGET: linux_amd64
          GOOS: linux
          GOARCH: amd64
          BINARY_SUFFIX: ''

  noembed_linux_arm64:
    desc: Build Linux ARM64 without embedded models
    cmds:
      - task: noembed_build
        vars:
          TFLITE_LIB_DIR: '{{.DOCKER_LIB_DIR | default .SYSTEM_LIB_DIR_ARM64}}'
          TFLITE_LIB_ARCH: linux_arm64.tar.gz
          TARGET: linux_arm64
          GOOS: linux
          GOARCH: arm64
          CROSS_COMPILE_CHECK: 'aarch64'
          CC: 'aarch64-linux-gnu-gcc'
          BINARY_SUFFIX: ''

  noembed_windows_amd64:
    desc: Build Windows AMD64 without embedded models
    cmds:
      - task: noembed_build
        vars:
          TFLITE_LIB_DIR: /usr/x86_64-w64-mingw32/lib
          TFLITE_LIB_ARCH: windows_amd64.zip
          TARGET: windows_amd64
          GOOS: windows
          GOARCH: amd64
          CC: x86_64-w64-mingw32-gcc
          BINARY_SUFFIX: '.exe'

  noembed_darwin_amd64:
    desc: Build Darwin AMD64 without embedded models
    cmds:
      - task: noembed_build
        vars:
          TFLITE_LIB_DIR: /usr/local/lib
          TFLITE_LIB_ARCH: darwin_amd64.tar.gz
          TARGET: darwin_amd64
          GOOS: darwin
          GOARCH: amd64
          BINARY_SUFFIX: ''

  noembed_darwin_arm64:
    desc: Build Darwin ARM64 without embedded models
    cmds:
      - task: noembed_build
        vars:
          TFLITE_LIB_DIR: /opt/homebrew/lib
          TFLITE_LIB_ARCH: darwin_arm64.tar.gz
          TARGET: darwin_arm64
          GOOS: darwin
          GOARCH: arm64
          BINARY_SUFFIX: ''

  ensure-tflite-symlinks:
    internal: true
    cmds:
      - |
        # Only create directory if it doesn't exist
        if [ ! -d "{{.LIB_DIR}}" ]; then
          if [ -w "$(dirname "{{.LIB_DIR}}")" ] 2>/dev/null; then
            mkdir -p "{{.LIB_DIR}}"
          else
            sudo mkdir -p "{{.LIB_DIR}}"
          fi
        fi
      - |
        if [[ "{{.LIB_FILENAME}}" == *.dll ]] && [ ! -f "{{.LIB_DIR}}/tensorflowlite_c.dll" ]; then
          if [ -w "{{.LIB_DIR}}" ]; then
            ln -sf "{{.LIB_DIR}}/{{.LIB_FILENAME}}" "{{.LIB_DIR}}/tensorflowlite_c.dll"
          else
            sudo ln -sf "{{.LIB_DIR}}/{{.LIB_FILENAME}}" "{{.LIB_DIR}}/tensorflowlite_c.dll"
          fi
        elif [ "{{.UNAME_S}}" = "Linux" ] && [ ! -f "{{.LIB_DIR}}/libtensorflowlite_c.so" ]; then
          if [ -w "{{.LIB_DIR}}" ]; then
            cd {{.LIB_DIR}} && \
            ln -sf {{.LIB_FILENAME}} libtensorflowlite_c.so.2 && \
            ln -sf libtensorflowlite_c.so.2 libtensorflowlite_c.so
          else
            cd {{.LIB_DIR}} && \
            sudo ln -sf {{.LIB_FILENAME}} libtensorflowlite_c.so.2 && \
            sudo ln -sf libtensorflowlite_c.so.2 libtensorflowlite_c.so
          fi
        elif [ "{{.UNAME_S}}" = "Darwin" ] && [ ! -f "{{.LIB_DIR}}/libtensorflowlite_c.dylib" ]; then
          cd {{.LIB_DIR}} && \
          ln -sf {{.LIB_FILENAME}} libtensorflowlite_c.dylib
        fi 
      
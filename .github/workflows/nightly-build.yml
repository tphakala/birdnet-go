name: BirdNET-Go Nightly Build

on:
  workflow_dispatch:

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

permissions:
  contents: write
  packages: write

jobs:
  nightly:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            os: ubuntu-24.04
          - goos: linux
            goarch: arm64
            os: ubuntu-24.04
          - goos: windows
            goarch: amd64
            os: ubuntu-24.04
          - goos: darwin
            goarch: arm64
            os: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          check-latest: true

      - name: Install Linux system dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config gcc-aarch64-linux-gnu gcc-mingw-w64-x86-64

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Get Build Version
        id: get_build_version
        run: |
          # Use simple date format for nightly builds
          DATE=$(date +'%Y%m%d')
          BUILD_VERSION="nightly-${DATE}"
          echo "BUILD_VERSION=${BUILD_VERSION}" >> ${GITHUB_ENV}
          echo "build_version=${BUILD_VERSION}" >> $GITHUB_OUTPUT

      - name: Build BirdNET-Go
        run: |
          # Build the application
          task ${{ matrix.goos }}_${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          BUILD_VERSION: ${{ env.BUILD_VERSION }}
          PUPPETEER_SKIP_DOWNLOAD: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Create Release Artifacts
        run: |
          # Create artifacts directory
          mkdir -p artifacts
          
          # Set binary name based on OS
          BINARY_NAME=birdnet-go
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME=birdnet-go.exe
          fi
          
          # Copy binary
          cp bin/$BINARY_NAME artifacts/
          
          # Copy required library files based on OS and architecture
          if [ "${{ matrix.goos }}" = "linux" ]; then
            if [ "${{ matrix.goarch }}" = "amd64" ]; then
              cp /usr/lib/libtensorflowlite_c.so artifacts/
            elif [ "${{ matrix.goarch }}" = "arm64" ]; then
              cp /usr/aarch64-linux-gnu/lib/libtensorflowlite_c.so artifacts/
            fi
          elif [ "${{ matrix.goos }}" = "windows" ]; then
            cp /usr/x86_64-w64-mingw32/lib/tensorflowlite_c.dll artifacts/
          elif [ "${{ matrix.goos }}" = "darwin" ]; then
            cp /opt/homebrew/lib/libtensorflowlite_c.dylib artifacts/
          fi
          
          # Create tarball
          cd artifacts
          tar czf ../birdnet-go-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz *

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: birdnet-go-${{ matrix.goos }}-${{ matrix.goarch }}
          path: birdnet-go-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz

      # Optional: Create a GitHub release for tagged builds
      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          files: birdnet-go-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          tag_name: ${{ steps.get_build_version.outputs.build_version }}
          name: "Nightly Build ${{ steps.get_build_version.outputs.build_version }}"
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.3.2
        with:
          keep_latest: 14
          delete_tags: true
          delete_tag_pattern: ^nightly-
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          # Use same version format as binary builds for consistency
          DATE=$(date +'%Y%m%d')
          BUILD_VERSION="nightly-${DATE}"
          echo "VERSION=${BUILD_VERSION}" >> ${GITHUB_ENV}
          echo "version=${BUILD_VERSION}" >> $GITHUB_OUTPUT

  docker:
    needs: get-version
    uses: ./.github/workflows/docker-build-push.yml
    with:
      tag-strategy: "nightly"
      version: ${{ needs.get-version.outputs.version }}
      create-latest-tag: false
      platforms: '["linux/amd64", "linux/arm64"]'
      push-to-ghcr: true
      push-to-dockerhub: true
      cleanup-old-images: true
      keep-images-count: 14
    secrets: inherit
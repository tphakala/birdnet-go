// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	datastore "github.com/tphakala/birdnet-go/internal/datastore"
	gorm "gorm.io/gorm"

	metrics "github.com/tphakala/birdnet-go/internal/observability/metrics"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// BatchSaveDynamicThresholds provides a mock function with given fields: thresholds
func (_m *MockInterface) BatchSaveDynamicThresholds(thresholds []datastore.DynamicThreshold) error {
	ret := _m.Called(thresholds)

	if len(ret) == 0 {
		panic("no return value specified for BatchSaveDynamicThresholds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]datastore.DynamicThreshold) error); ok {
		r0 = rf(thresholds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_BatchSaveDynamicThresholds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchSaveDynamicThresholds'
type MockInterface_BatchSaveDynamicThresholds_Call struct {
	*mock.Call
}

// BatchSaveDynamicThresholds is a helper method to define mock.On call
//   - thresholds []datastore.DynamicThreshold
func (_e *MockInterface_Expecter) BatchSaveDynamicThresholds(thresholds interface{}) *MockInterface_BatchSaveDynamicThresholds_Call {
	return &MockInterface_BatchSaveDynamicThresholds_Call{Call: _e.mock.On("BatchSaveDynamicThresholds", thresholds)}
}

func (_c *MockInterface_BatchSaveDynamicThresholds_Call) Run(run func(thresholds []datastore.DynamicThreshold)) *MockInterface_BatchSaveDynamicThresholds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]datastore.DynamicThreshold))
	})
	return _c
}

func (_c *MockInterface_BatchSaveDynamicThresholds_Call) Return(_a0 error) *MockInterface_BatchSaveDynamicThresholds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_BatchSaveDynamicThresholds_Call) RunAndReturn(run func([]datastore.DynamicThreshold) error) *MockInterface_BatchSaveDynamicThresholds_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Close() *MockInterface_Close_Call {
	return &MockInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockInterface_Close_Call) Run(run func()) *MockInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Close_Call) Return(_a0 error) *MockInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Close_Call) RunAndReturn(run func() error) *MockInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CountHourlyDetections provides a mock function with given fields: date, hour, duration
func (_m *MockInterface) CountHourlyDetections(date string, hour string, duration int) (int64, error) {
	ret := _m.Called(date, hour, duration)

	if len(ret) == 0 {
		panic("no return value specified for CountHourlyDetections")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (int64, error)); ok {
		return rf(date, hour, duration)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) int64); ok {
		r0 = rf(date, hour, duration)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(date, hour, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_CountHourlyDetections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountHourlyDetections'
type MockInterface_CountHourlyDetections_Call struct {
	*mock.Call
}

// CountHourlyDetections is a helper method to define mock.On call
//   - date string
//   - hour string
//   - duration int
func (_e *MockInterface_Expecter) CountHourlyDetections(date interface{}, hour interface{}, duration interface{}) *MockInterface_CountHourlyDetections_Call {
	return &MockInterface_CountHourlyDetections_Call{Call: _e.mock.On("CountHourlyDetections", date, hour, duration)}
}

func (_c *MockInterface_CountHourlyDetections_Call) Run(run func(date string, hour string, duration int)) *MockInterface_CountHourlyDetections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockInterface_CountHourlyDetections_Call) Return(_a0 int64, _a1 error) *MockInterface_CountHourlyDetections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_CountHourlyDetections_Call) RunAndReturn(run func(string, string, int) (int64, error)) *MockInterface_CountHourlyDetections_Call {
	_c.Call.Return(run)
	return _c
}

// CountSearchResults provides a mock function with given fields: query
func (_m *MockInterface) CountSearchResults(query string) (int64, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for CountSearchResults")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_CountSearchResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSearchResults'
type MockInterface_CountSearchResults_Call struct {
	*mock.Call
}

// CountSearchResults is a helper method to define mock.On call
//   - query string
func (_e *MockInterface_Expecter) CountSearchResults(query interface{}) *MockInterface_CountSearchResults_Call {
	return &MockInterface_CountSearchResults_Call{Call: _e.mock.On("CountSearchResults", query)}
}

func (_c *MockInterface_CountSearchResults_Call) Run(run func(query string)) *MockInterface_CountSearchResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_CountSearchResults_Call) Return(_a0 int64, _a1 error) *MockInterface_CountSearchResults_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_CountSearchResults_Call) RunAndReturn(run func(string) (int64, error)) *MockInterface_CountSearchResults_Call {
	_c.Call.Return(run)
	return _c
}

// CountSpeciesDetections provides a mock function with given fields: species, date, hour, duration
func (_m *MockInterface) CountSpeciesDetections(species string, date string, hour string, duration int) (int64, error) {
	ret := _m.Called(species, date, hour, duration)

	if len(ret) == 0 {
		panic("no return value specified for CountSpeciesDetections")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int) (int64, error)); ok {
		return rf(species, date, hour, duration)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int) int64); ok {
		r0 = rf(species, date, hour, duration)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int) error); ok {
		r1 = rf(species, date, hour, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_CountSpeciesDetections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSpeciesDetections'
type MockInterface_CountSpeciesDetections_Call struct {
	*mock.Call
}

// CountSpeciesDetections is a helper method to define mock.On call
//   - species string
//   - date string
//   - hour string
//   - duration int
func (_e *MockInterface_Expecter) CountSpeciesDetections(species interface{}, date interface{}, hour interface{}, duration interface{}) *MockInterface_CountSpeciesDetections_Call {
	return &MockInterface_CountSpeciesDetections_Call{Call: _e.mock.On("CountSpeciesDetections", species, date, hour, duration)}
}

func (_c *MockInterface_CountSpeciesDetections_Call) Run(run func(species string, date string, hour string, duration int)) *MockInterface_CountSpeciesDetections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockInterface_CountSpeciesDetections_Call) Return(_a0 int64, _a1 error) *MockInterface_CountSpeciesDetections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_CountSpeciesDetections_Call) RunAndReturn(run func(string, string, string, int) (int64, error)) *MockInterface_CountSpeciesDetections_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockInterface) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *MockInterface_Expecter) Delete(id interface{}) *MockInterface_Delete_Call {
	return &MockInterface_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockInterface_Delete_Call) Run(run func(id string)) *MockInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_Delete_Call) Return(_a0 error) *MockInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Delete_Call) RunAndReturn(run func(string) error) *MockInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDynamicThreshold provides a mock function with given fields: speciesName
func (_m *MockInterface) DeleteDynamicThreshold(speciesName string) error {
	ret := _m.Called(speciesName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDynamicThreshold")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(speciesName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_DeleteDynamicThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDynamicThreshold'
type MockInterface_DeleteDynamicThreshold_Call struct {
	*mock.Call
}

// DeleteDynamicThreshold is a helper method to define mock.On call
//   - speciesName string
func (_e *MockInterface_Expecter) DeleteDynamicThreshold(speciesName interface{}) *MockInterface_DeleteDynamicThreshold_Call {
	return &MockInterface_DeleteDynamicThreshold_Call{Call: _e.mock.On("DeleteDynamicThreshold", speciesName)}
}

func (_c *MockInterface_DeleteDynamicThreshold_Call) Run(run func(speciesName string)) *MockInterface_DeleteDynamicThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_DeleteDynamicThreshold_Call) Return(_a0 error) *MockInterface_DeleteDynamicThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_DeleteDynamicThreshold_Call) RunAndReturn(run func(string) error) *MockInterface_DeleteDynamicThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpiredDynamicThresholds provides a mock function with given fields: before
func (_m *MockInterface) DeleteExpiredDynamicThresholds(before time.Time) (int64, error) {
	ret := _m.Called(before)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredDynamicThresholds")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (int64, error)); ok {
		return rf(before)
	}
	if rf, ok := ret.Get(0).(func(time.Time) int64); ok {
		r0 = rf(before)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(before)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_DeleteExpiredDynamicThresholds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredDynamicThresholds'
type MockInterface_DeleteExpiredDynamicThresholds_Call struct {
	*mock.Call
}

// DeleteExpiredDynamicThresholds is a helper method to define mock.On call
//   - before time.Time
func (_e *MockInterface_Expecter) DeleteExpiredDynamicThresholds(before interface{}) *MockInterface_DeleteExpiredDynamicThresholds_Call {
	return &MockInterface_DeleteExpiredDynamicThresholds_Call{Call: _e.mock.On("DeleteExpiredDynamicThresholds", before)}
}

func (_c *MockInterface_DeleteExpiredDynamicThresholds_Call) Run(run func(before time.Time)) *MockInterface_DeleteExpiredDynamicThresholds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockInterface_DeleteExpiredDynamicThresholds_Call) Return(_a0 int64, _a1 error) *MockInterface_DeleteExpiredDynamicThresholds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_DeleteExpiredDynamicThresholds_Call) RunAndReturn(run func(time.Time) (int64, error)) *MockInterface_DeleteExpiredDynamicThresholds_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpiredNotificationHistory provides a mock function with given fields: before
func (_m *MockInterface) DeleteExpiredNotificationHistory(before time.Time) (int64, error) {
	ret := _m.Called(before)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredNotificationHistory")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (int64, error)); ok {
		return rf(before)
	}
	if rf, ok := ret.Get(0).(func(time.Time) int64); ok {
		r0 = rf(before)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(before)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_DeleteExpiredNotificationHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredNotificationHistory'
type MockInterface_DeleteExpiredNotificationHistory_Call struct {
	*mock.Call
}

// DeleteExpiredNotificationHistory is a helper method to define mock.On call
//   - before time.Time
func (_e *MockInterface_Expecter) DeleteExpiredNotificationHistory(before interface{}) *MockInterface_DeleteExpiredNotificationHistory_Call {
	return &MockInterface_DeleteExpiredNotificationHistory_Call{Call: _e.mock.On("DeleteExpiredNotificationHistory", before)}
}

func (_c *MockInterface_DeleteExpiredNotificationHistory_Call) Run(run func(before time.Time)) *MockInterface_DeleteExpiredNotificationHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockInterface_DeleteExpiredNotificationHistory_Call) Return(_a0 int64, _a1 error) *MockInterface_DeleteExpiredNotificationHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_DeleteExpiredNotificationHistory_Call) RunAndReturn(run func(time.Time) (int64, error)) *MockInterface_DeleteExpiredNotificationHistory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNoteClipPath provides a mock function with given fields: noteID
func (_m *MockInterface) DeleteNoteClipPath(noteID string) error {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNoteClipPath")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_DeleteNoteClipPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNoteClipPath'
type MockInterface_DeleteNoteClipPath_Call struct {
	*mock.Call
}

// DeleteNoteClipPath is a helper method to define mock.On call
//   - noteID string
func (_e *MockInterface_Expecter) DeleteNoteClipPath(noteID interface{}) *MockInterface_DeleteNoteClipPath_Call {
	return &MockInterface_DeleteNoteClipPath_Call{Call: _e.mock.On("DeleteNoteClipPath", noteID)}
}

func (_c *MockInterface_DeleteNoteClipPath_Call) Run(run func(noteID string)) *MockInterface_DeleteNoteClipPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_DeleteNoteClipPath_Call) Return(_a0 error) *MockInterface_DeleteNoteClipPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_DeleteNoteClipPath_Call) RunAndReturn(run func(string) error) *MockInterface_DeleteNoteClipPath_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNoteComment provides a mock function with given fields: commentID
func (_m *MockInterface) DeleteNoteComment(commentID string) error {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNoteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_DeleteNoteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNoteComment'
type MockInterface_DeleteNoteComment_Call struct {
	*mock.Call
}

// DeleteNoteComment is a helper method to define mock.On call
//   - commentID string
func (_e *MockInterface_Expecter) DeleteNoteComment(commentID interface{}) *MockInterface_DeleteNoteComment_Call {
	return &MockInterface_DeleteNoteComment_Call{Call: _e.mock.On("DeleteNoteComment", commentID)}
}

func (_c *MockInterface_DeleteNoteComment_Call) Run(run func(commentID string)) *MockInterface_DeleteNoteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_DeleteNoteComment_Call) Return(_a0 error) *MockInterface_DeleteNoteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_DeleteNoteComment_Call) RunAndReturn(run func(string) error) *MockInterface_DeleteNoteComment_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockInterface) Get(id string) (datastore.Note, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 datastore.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (datastore.Note, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) datastore.Note); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(datastore.Note)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *MockInterface_Expecter) Get(id interface{}) *MockInterface_Get_Call {
	return &MockInterface_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockInterface_Get_Call) Run(run func(id string)) *MockInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_Get_Call) Return(_a0 datastore.Note, _a1 error) *MockInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_Get_Call) RunAndReturn(run func(string) (datastore.Note, error)) *MockInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveNotificationHistory provides a mock function with given fields: after
func (_m *MockInterface) GetActiveNotificationHistory(after time.Time) ([]datastore.NotificationHistory, error) {
	ret := _m.Called(after)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveNotificationHistory")
	}

	var r0 []datastore.NotificationHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) ([]datastore.NotificationHistory, error)); ok {
		return rf(after)
	}
	if rf, ok := ret.Get(0).(func(time.Time) []datastore.NotificationHistory); ok {
		r0 = rf(after)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.NotificationHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(after)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetActiveNotificationHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveNotificationHistory'
type MockInterface_GetActiveNotificationHistory_Call struct {
	*mock.Call
}

// GetActiveNotificationHistory is a helper method to define mock.On call
//   - after time.Time
func (_e *MockInterface_Expecter) GetActiveNotificationHistory(after interface{}) *MockInterface_GetActiveNotificationHistory_Call {
	return &MockInterface_GetActiveNotificationHistory_Call{Call: _e.mock.On("GetActiveNotificationHistory", after)}
}

func (_c *MockInterface_GetActiveNotificationHistory_Call) Run(run func(after time.Time)) *MockInterface_GetActiveNotificationHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockInterface_GetActiveNotificationHistory_Call) Return(_a0 []datastore.NotificationHistory, _a1 error) *MockInterface_GetActiveNotificationHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetActiveNotificationHistory_Call) RunAndReturn(run func(time.Time) ([]datastore.NotificationHistory, error)) *MockInterface_GetActiveNotificationHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDetectedSpecies provides a mock function with no fields
func (_m *MockInterface) GetAllDetectedSpecies() ([]datastore.Note, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllDetectedSpecies")
	}

	var r0 []datastore.Note
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]datastore.Note, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []datastore.Note); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Note)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetAllDetectedSpecies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDetectedSpecies'
type MockInterface_GetAllDetectedSpecies_Call struct {
	*mock.Call
}

// GetAllDetectedSpecies is a helper method to define mock.On call
func (_e *MockInterface_Expecter) GetAllDetectedSpecies() *MockInterface_GetAllDetectedSpecies_Call {
	return &MockInterface_GetAllDetectedSpecies_Call{Call: _e.mock.On("GetAllDetectedSpecies")}
}

func (_c *MockInterface_GetAllDetectedSpecies_Call) Run(run func()) *MockInterface_GetAllDetectedSpecies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_GetAllDetectedSpecies_Call) Return(_a0 []datastore.Note, _a1 error) *MockInterface_GetAllDetectedSpecies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetAllDetectedSpecies_Call) RunAndReturn(run func() ([]datastore.Note, error)) *MockInterface_GetAllDetectedSpecies_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDynamicThresholds provides a mock function with given fields: limit
func (_m *MockInterface) GetAllDynamicThresholds(limit ...int) ([]datastore.DynamicThreshold, error) {
	_va := make([]interface{}, len(limit))
	for _i := range limit {
		_va[_i] = limit[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDynamicThresholds")
	}

	var r0 []datastore.DynamicThreshold
	var r1 error
	if rf, ok := ret.Get(0).(func(...int) ([]datastore.DynamicThreshold, error)); ok {
		return rf(limit...)
	}
	if rf, ok := ret.Get(0).(func(...int) []datastore.DynamicThreshold); ok {
		r0 = rf(limit...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.DynamicThreshold)
		}
	}

	if rf, ok := ret.Get(1).(func(...int) error); ok {
		r1 = rf(limit...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetAllDynamicThresholds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDynamicThresholds'
type MockInterface_GetAllDynamicThresholds_Call struct {
	*mock.Call
}

// GetAllDynamicThresholds is a helper method to define mock.On call
//   - limit ...int
func (_e *MockInterface_Expecter) GetAllDynamicThresholds(limit ...interface{}) *MockInterface_GetAllDynamicThresholds_Call {
	return &MockInterface_GetAllDynamicThresholds_Call{Call: _e.mock.On("GetAllDynamicThresholds",
		append([]interface{}{}, limit...)...)}
}

func (_c *MockInterface_GetAllDynamicThresholds_Call) Run(run func(limit ...int)) *MockInterface_GetAllDynamicThresholds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_GetAllDynamicThresholds_Call) Return(_a0 []datastore.DynamicThreshold, _a1 error) *MockInterface_GetAllDynamicThresholds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetAllDynamicThresholds_Call) RunAndReturn(run func(...int) ([]datastore.DynamicThreshold, error)) *MockInterface_GetAllDynamicThresholds_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllImageCaches provides a mock function with given fields: providerName
func (_m *MockInterface) GetAllImageCaches(providerName string) ([]datastore.ImageCache, error) {
	ret := _m.Called(providerName)

	if len(ret) == 0 {
		panic("no return value specified for GetAllImageCaches")
	}

	var r0 []datastore.ImageCache
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]datastore.ImageCache, error)); ok {
		return rf(providerName)
	}
	if rf, ok := ret.Get(0).(func(string) []datastore.ImageCache); ok {
		r0 = rf(providerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.ImageCache)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(providerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetAllImageCaches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllImageCaches'
type MockInterface_GetAllImageCaches_Call struct {
	*mock.Call
}

// GetAllImageCaches is a helper method to define mock.On call
//   - providerName string
func (_e *MockInterface_Expecter) GetAllImageCaches(providerName interface{}) *MockInterface_GetAllImageCaches_Call {
	return &MockInterface_GetAllImageCaches_Call{Call: _e.mock.On("GetAllImageCaches", providerName)}
}

func (_c *MockInterface_GetAllImageCaches_Call) Run(run func(providerName string)) *MockInterface_GetAllImageCaches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetAllImageCaches_Call) Return(_a0 []datastore.ImageCache, _a1 error) *MockInterface_GetAllImageCaches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetAllImageCaches_Call) RunAndReturn(run func(string) ([]datastore.ImageCache, error)) *MockInterface_GetAllImageCaches_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotes provides a mock function with no fields
func (_m *MockInterface) GetAllNotes() ([]datastore.Note, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotes")
	}

	var r0 []datastore.Note
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]datastore.Note, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []datastore.Note); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Note)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetAllNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotes'
type MockInterface_GetAllNotes_Call struct {
	*mock.Call
}

// GetAllNotes is a helper method to define mock.On call
func (_e *MockInterface_Expecter) GetAllNotes() *MockInterface_GetAllNotes_Call {
	return &MockInterface_GetAllNotes_Call{Call: _e.mock.On("GetAllNotes")}
}

func (_c *MockInterface_GetAllNotes_Call) Run(run func()) *MockInterface_GetAllNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_GetAllNotes_Call) Return(_a0 []datastore.Note, _a1 error) *MockInterface_GetAllNotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetAllNotes_Call) RunAndReturn(run func() ([]datastore.Note, error)) *MockInterface_GetAllNotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetDailyAnalyticsData provides a mock function with given fields: ctx, startDate, endDate, species
func (_m *MockInterface) GetDailyAnalyticsData(ctx context.Context, startDate string, endDate string, species string) ([]datastore.DailyAnalyticsData, error) {
	ret := _m.Called(ctx, startDate, endDate, species)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyAnalyticsData")
	}

	var r0 []datastore.DailyAnalyticsData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]datastore.DailyAnalyticsData, error)); ok {
		return rf(ctx, startDate, endDate, species)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []datastore.DailyAnalyticsData); ok {
		r0 = rf(ctx, startDate, endDate, species)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.DailyAnalyticsData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, startDate, endDate, species)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetDailyAnalyticsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDailyAnalyticsData'
type MockInterface_GetDailyAnalyticsData_Call struct {
	*mock.Call
}

// GetDailyAnalyticsData is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate string
//   - endDate string
//   - species string
func (_e *MockInterface_Expecter) GetDailyAnalyticsData(ctx interface{}, startDate interface{}, endDate interface{}, species interface{}) *MockInterface_GetDailyAnalyticsData_Call {
	return &MockInterface_GetDailyAnalyticsData_Call{Call: _e.mock.On("GetDailyAnalyticsData", ctx, startDate, endDate, species)}
}

func (_c *MockInterface_GetDailyAnalyticsData_Call) Run(run func(ctx context.Context, startDate string, endDate string, species string)) *MockInterface_GetDailyAnalyticsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockInterface_GetDailyAnalyticsData_Call) Return(_a0 []datastore.DailyAnalyticsData, _a1 error) *MockInterface_GetDailyAnalyticsData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetDailyAnalyticsData_Call) RunAndReturn(run func(context.Context, string, string, string) ([]datastore.DailyAnalyticsData, error)) *MockInterface_GetDailyAnalyticsData_Call {
	_c.Call.Return(run)
	return _c
}

// GetDailyEvents provides a mock function with given fields: date
func (_m *MockInterface) GetDailyEvents(date string) (datastore.DailyEvents, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyEvents")
	}

	var r0 datastore.DailyEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (datastore.DailyEvents, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(string) datastore.DailyEvents); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(datastore.DailyEvents)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetDailyEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDailyEvents'
type MockInterface_GetDailyEvents_Call struct {
	*mock.Call
}

// GetDailyEvents is a helper method to define mock.On call
//   - date string
func (_e *MockInterface_Expecter) GetDailyEvents(date interface{}) *MockInterface_GetDailyEvents_Call {
	return &MockInterface_GetDailyEvents_Call{Call: _e.mock.On("GetDailyEvents", date)}
}

func (_c *MockInterface_GetDailyEvents_Call) Run(run func(date string)) *MockInterface_GetDailyEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetDailyEvents_Call) Return(_a0 datastore.DailyEvents, _a1 error) *MockInterface_GetDailyEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetDailyEvents_Call) RunAndReturn(run func(string) (datastore.DailyEvents, error)) *MockInterface_GetDailyEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetDetectionTrends provides a mock function with given fields: ctx, period, limit
func (_m *MockInterface) GetDetectionTrends(ctx context.Context, period string, limit int) ([]datastore.DailyAnalyticsData, error) {
	ret := _m.Called(ctx, period, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetDetectionTrends")
	}

	var r0 []datastore.DailyAnalyticsData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]datastore.DailyAnalyticsData, error)); ok {
		return rf(ctx, period, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []datastore.DailyAnalyticsData); ok {
		r0 = rf(ctx, period, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.DailyAnalyticsData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, period, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetDetectionTrends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetectionTrends'
type MockInterface_GetDetectionTrends_Call struct {
	*mock.Call
}

// GetDetectionTrends is a helper method to define mock.On call
//   - ctx context.Context
//   - period string
//   - limit int
func (_e *MockInterface_Expecter) GetDetectionTrends(ctx interface{}, period interface{}, limit interface{}) *MockInterface_GetDetectionTrends_Call {
	return &MockInterface_GetDetectionTrends_Call{Call: _e.mock.On("GetDetectionTrends", ctx, period, limit)}
}

func (_c *MockInterface_GetDetectionTrends_Call) Run(run func(ctx context.Context, period string, limit int)) *MockInterface_GetDetectionTrends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockInterface_GetDetectionTrends_Call) Return(_a0 []datastore.DailyAnalyticsData, _a1 error) *MockInterface_GetDetectionTrends_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetDetectionTrends_Call) RunAndReturn(run func(context.Context, string, int) ([]datastore.DailyAnalyticsData, error)) *MockInterface_GetDetectionTrends_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamicThreshold provides a mock function with given fields: speciesName
func (_m *MockInterface) GetDynamicThreshold(speciesName string) (*datastore.DynamicThreshold, error) {
	ret := _m.Called(speciesName)

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicThreshold")
	}

	var r0 *datastore.DynamicThreshold
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*datastore.DynamicThreshold, error)); ok {
		return rf(speciesName)
	}
	if rf, ok := ret.Get(0).(func(string) *datastore.DynamicThreshold); ok {
		r0 = rf(speciesName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.DynamicThreshold)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(speciesName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetDynamicThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicThreshold'
type MockInterface_GetDynamicThreshold_Call struct {
	*mock.Call
}

// GetDynamicThreshold is a helper method to define mock.On call
//   - speciesName string
func (_e *MockInterface_Expecter) GetDynamicThreshold(speciesName interface{}) *MockInterface_GetDynamicThreshold_Call {
	return &MockInterface_GetDynamicThreshold_Call{Call: _e.mock.On("GetDynamicThreshold", speciesName)}
}

func (_c *MockInterface_GetDynamicThreshold_Call) Run(run func(speciesName string)) *MockInterface_GetDynamicThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetDynamicThreshold_Call) Return(_a0 *datastore.DynamicThreshold, _a1 error) *MockInterface_GetDynamicThreshold_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetDynamicThreshold_Call) RunAndReturn(run func(string) (*datastore.DynamicThreshold, error)) *MockInterface_GetDynamicThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// GetHourlyAnalyticsData provides a mock function with given fields: ctx, date, species
func (_m *MockInterface) GetHourlyAnalyticsData(ctx context.Context, date string, species string) ([]datastore.HourlyAnalyticsData, error) {
	ret := _m.Called(ctx, date, species)

	if len(ret) == 0 {
		panic("no return value specified for GetHourlyAnalyticsData")
	}

	var r0 []datastore.HourlyAnalyticsData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]datastore.HourlyAnalyticsData, error)); ok {
		return rf(ctx, date, species)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []datastore.HourlyAnalyticsData); ok {
		r0 = rf(ctx, date, species)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.HourlyAnalyticsData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, date, species)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetHourlyAnalyticsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHourlyAnalyticsData'
type MockInterface_GetHourlyAnalyticsData_Call struct {
	*mock.Call
}

// GetHourlyAnalyticsData is a helper method to define mock.On call
//   - ctx context.Context
//   - date string
//   - species string
func (_e *MockInterface_Expecter) GetHourlyAnalyticsData(ctx interface{}, date interface{}, species interface{}) *MockInterface_GetHourlyAnalyticsData_Call {
	return &MockInterface_GetHourlyAnalyticsData_Call{Call: _e.mock.On("GetHourlyAnalyticsData", ctx, date, species)}
}

func (_c *MockInterface_GetHourlyAnalyticsData_Call) Run(run func(ctx context.Context, date string, species string)) *MockInterface_GetHourlyAnalyticsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockInterface_GetHourlyAnalyticsData_Call) Return(_a0 []datastore.HourlyAnalyticsData, _a1 error) *MockInterface_GetHourlyAnalyticsData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetHourlyAnalyticsData_Call) RunAndReturn(run func(context.Context, string, string) ([]datastore.HourlyAnalyticsData, error)) *MockInterface_GetHourlyAnalyticsData_Call {
	_c.Call.Return(run)
	return _c
}

// GetHourlyDetections provides a mock function with given fields: date, hour, duration, limit, offset
func (_m *MockInterface) GetHourlyDetections(date string, hour string, duration int, limit int, offset int) ([]datastore.Note, error) {
	ret := _m.Called(date, hour, duration, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetHourlyDetections")
	}

	var r0 []datastore.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, int) ([]datastore.Note, error)); ok {
		return rf(date, hour, duration, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, int) []datastore.Note); ok {
		r0 = rf(date, hour, duration, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, int) error); ok {
		r1 = rf(date, hour, duration, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetHourlyDetections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHourlyDetections'
type MockInterface_GetHourlyDetections_Call struct {
	*mock.Call
}

// GetHourlyDetections is a helper method to define mock.On call
//   - date string
//   - hour string
//   - duration int
//   - limit int
//   - offset int
func (_e *MockInterface_Expecter) GetHourlyDetections(date interface{}, hour interface{}, duration interface{}, limit interface{}, offset interface{}) *MockInterface_GetHourlyDetections_Call {
	return &MockInterface_GetHourlyDetections_Call{Call: _e.mock.On("GetHourlyDetections", date, hour, duration, limit, offset)}
}

func (_c *MockInterface_GetHourlyDetections_Call) Run(run func(date string, hour string, duration int, limit int, offset int)) *MockInterface_GetHourlyDetections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockInterface_GetHourlyDetections_Call) Return(_a0 []datastore.Note, _a1 error) *MockInterface_GetHourlyDetections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetHourlyDetections_Call) RunAndReturn(run func(string, string, int, int, int) ([]datastore.Note, error)) *MockInterface_GetHourlyDetections_Call {
	_c.Call.Return(run)
	return _c
}

// GetHourlyDistribution provides a mock function with given fields: ctx, startDate, endDate, species
func (_m *MockInterface) GetHourlyDistribution(ctx context.Context, startDate string, endDate string, species string) ([]datastore.HourlyDistributionData, error) {
	ret := _m.Called(ctx, startDate, endDate, species)

	if len(ret) == 0 {
		panic("no return value specified for GetHourlyDistribution")
	}

	var r0 []datastore.HourlyDistributionData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]datastore.HourlyDistributionData, error)); ok {
		return rf(ctx, startDate, endDate, species)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []datastore.HourlyDistributionData); ok {
		r0 = rf(ctx, startDate, endDate, species)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.HourlyDistributionData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, startDate, endDate, species)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetHourlyDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHourlyDistribution'
type MockInterface_GetHourlyDistribution_Call struct {
	*mock.Call
}

// GetHourlyDistribution is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate string
//   - endDate string
//   - species string
func (_e *MockInterface_Expecter) GetHourlyDistribution(ctx interface{}, startDate interface{}, endDate interface{}, species interface{}) *MockInterface_GetHourlyDistribution_Call {
	return &MockInterface_GetHourlyDistribution_Call{Call: _e.mock.On("GetHourlyDistribution", ctx, startDate, endDate, species)}
}

func (_c *MockInterface_GetHourlyDistribution_Call) Run(run func(ctx context.Context, startDate string, endDate string, species string)) *MockInterface_GetHourlyDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockInterface_GetHourlyDistribution_Call) Return(_a0 []datastore.HourlyDistributionData, _a1 error) *MockInterface_GetHourlyDistribution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetHourlyDistribution_Call) RunAndReturn(run func(context.Context, string, string, string) ([]datastore.HourlyDistributionData, error)) *MockInterface_GetHourlyDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetHourlyOccurrences provides a mock function with given fields: date, commonName, minConfidenceNormalized
func (_m *MockInterface) GetHourlyOccurrences(date string, commonName string, minConfidenceNormalized float64) ([24]int, error) {
	ret := _m.Called(date, commonName, minConfidenceNormalized)

	if len(ret) == 0 {
		panic("no return value specified for GetHourlyOccurrences")
	}

	var r0 [24]int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, float64) ([24]int, error)); ok {
		return rf(date, commonName, minConfidenceNormalized)
	}
	if rf, ok := ret.Get(0).(func(string, string, float64) [24]int); ok {
		r0 = rf(date, commonName, minConfidenceNormalized)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([24]int)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, float64) error); ok {
		r1 = rf(date, commonName, minConfidenceNormalized)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetHourlyOccurrences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHourlyOccurrences'
type MockInterface_GetHourlyOccurrences_Call struct {
	*mock.Call
}

// GetHourlyOccurrences is a helper method to define mock.On call
//   - date string
//   - commonName string
//   - minConfidenceNormalized float64
func (_e *MockInterface_Expecter) GetHourlyOccurrences(date interface{}, commonName interface{}, minConfidenceNormalized interface{}) *MockInterface_GetHourlyOccurrences_Call {
	return &MockInterface_GetHourlyOccurrences_Call{Call: _e.mock.On("GetHourlyOccurrences", date, commonName, minConfidenceNormalized)}
}

func (_c *MockInterface_GetHourlyOccurrences_Call) Run(run func(date string, commonName string, minConfidenceNormalized float64)) *MockInterface_GetHourlyOccurrences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockInterface_GetHourlyOccurrences_Call) Return(_a0 [24]int, _a1 error) *MockInterface_GetHourlyOccurrences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetHourlyOccurrences_Call) RunAndReturn(run func(string, string, float64) ([24]int, error)) *MockInterface_GetHourlyOccurrences_Call {
	_c.Call.Return(run)
	return _c
}

// GetHourlyWeather provides a mock function with given fields: date
func (_m *MockInterface) GetHourlyWeather(date string) ([]datastore.HourlyWeather, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for GetHourlyWeather")
	}

	var r0 []datastore.HourlyWeather
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]datastore.HourlyWeather, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(string) []datastore.HourlyWeather); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.HourlyWeather)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetHourlyWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHourlyWeather'
type MockInterface_GetHourlyWeather_Call struct {
	*mock.Call
}

// GetHourlyWeather is a helper method to define mock.On call
//   - date string
func (_e *MockInterface_Expecter) GetHourlyWeather(date interface{}) *MockInterface_GetHourlyWeather_Call {
	return &MockInterface_GetHourlyWeather_Call{Call: _e.mock.On("GetHourlyWeather", date)}
}

func (_c *MockInterface_GetHourlyWeather_Call) Run(run func(date string)) *MockInterface_GetHourlyWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetHourlyWeather_Call) Return(_a0 []datastore.HourlyWeather, _a1 error) *MockInterface_GetHourlyWeather_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetHourlyWeather_Call) RunAndReturn(run func(string) ([]datastore.HourlyWeather, error)) *MockInterface_GetHourlyWeather_Call {
	_c.Call.Return(run)
	return _c
}

// GetImageCache provides a mock function with given fields: query
func (_m *MockInterface) GetImageCache(query datastore.ImageCacheQuery) (*datastore.ImageCache, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetImageCache")
	}

	var r0 *datastore.ImageCache
	var r1 error
	if rf, ok := ret.Get(0).(func(datastore.ImageCacheQuery) (*datastore.ImageCache, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(datastore.ImageCacheQuery) *datastore.ImageCache); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.ImageCache)
		}
	}

	if rf, ok := ret.Get(1).(func(datastore.ImageCacheQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetImageCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageCache'
type MockInterface_GetImageCache_Call struct {
	*mock.Call
}

// GetImageCache is a helper method to define mock.On call
//   - query datastore.ImageCacheQuery
func (_e *MockInterface_Expecter) GetImageCache(query interface{}) *MockInterface_GetImageCache_Call {
	return &MockInterface_GetImageCache_Call{Call: _e.mock.On("GetImageCache", query)}
}

func (_c *MockInterface_GetImageCache_Call) Run(run func(query datastore.ImageCacheQuery)) *MockInterface_GetImageCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datastore.ImageCacheQuery))
	})
	return _c
}

func (_c *MockInterface_GetImageCache_Call) Return(_a0 *datastore.ImageCache, _a1 error) *MockInterface_GetImageCache_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetImageCache_Call) RunAndReturn(run func(datastore.ImageCacheQuery) (*datastore.ImageCache, error)) *MockInterface_GetImageCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetImageCacheBatch provides a mock function with given fields: providerName, scientificNames
func (_m *MockInterface) GetImageCacheBatch(providerName string, scientificNames []string) (map[string]*datastore.ImageCache, error) {
	ret := _m.Called(providerName, scientificNames)

	if len(ret) == 0 {
		panic("no return value specified for GetImageCacheBatch")
	}

	var r0 map[string]*datastore.ImageCache
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (map[string]*datastore.ImageCache, error)); ok {
		return rf(providerName, scientificNames)
	}
	if rf, ok := ret.Get(0).(func(string, []string) map[string]*datastore.ImageCache); ok {
		r0 = rf(providerName, scientificNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*datastore.ImageCache)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(providerName, scientificNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetImageCacheBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageCacheBatch'
type MockInterface_GetImageCacheBatch_Call struct {
	*mock.Call
}

// GetImageCacheBatch is a helper method to define mock.On call
//   - providerName string
//   - scientificNames []string
func (_e *MockInterface_Expecter) GetImageCacheBatch(providerName interface{}, scientificNames interface{}) *MockInterface_GetImageCacheBatch_Call {
	return &MockInterface_GetImageCacheBatch_Call{Call: _e.mock.On("GetImageCacheBatch", providerName, scientificNames)}
}

func (_c *MockInterface_GetImageCacheBatch_Call) Run(run func(providerName string, scientificNames []string)) *MockInterface_GetImageCacheBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockInterface_GetImageCacheBatch_Call) Return(_a0 map[string]*datastore.ImageCache, _a1 error) *MockInterface_GetImageCacheBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetImageCacheBatch_Call) RunAndReturn(run func(string, []string) (map[string]*datastore.ImageCache, error)) *MockInterface_GetImageCacheBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastDetections provides a mock function with given fields: numDetections
func (_m *MockInterface) GetLastDetections(numDetections int) ([]datastore.Note, error) {
	ret := _m.Called(numDetections)

	if len(ret) == 0 {
		panic("no return value specified for GetLastDetections")
	}

	var r0 []datastore.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]datastore.Note, error)); ok {
		return rf(numDetections)
	}
	if rf, ok := ret.Get(0).(func(int) []datastore.Note); ok {
		r0 = rf(numDetections)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(numDetections)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetLastDetections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastDetections'
type MockInterface_GetLastDetections_Call struct {
	*mock.Call
}

// GetLastDetections is a helper method to define mock.On call
//   - numDetections int
func (_e *MockInterface_Expecter) GetLastDetections(numDetections interface{}) *MockInterface_GetLastDetections_Call {
	return &MockInterface_GetLastDetections_Call{Call: _e.mock.On("GetLastDetections", numDetections)}
}

func (_c *MockInterface_GetLastDetections_Call) Run(run func(numDetections int)) *MockInterface_GetLastDetections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockInterface_GetLastDetections_Call) Return(_a0 []datastore.Note, _a1 error) *MockInterface_GetLastDetections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetLastDetections_Call) RunAndReturn(run func(int) ([]datastore.Note, error)) *MockInterface_GetLastDetections_Call {
	_c.Call.Return(run)
	return _c
}

// GetLockedNotesClipPaths provides a mock function with no fields
func (_m *MockInterface) GetLockedNotesClipPaths() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLockedNotesClipPaths")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetLockedNotesClipPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLockedNotesClipPaths'
type MockInterface_GetLockedNotesClipPaths_Call struct {
	*mock.Call
}

// GetLockedNotesClipPaths is a helper method to define mock.On call
func (_e *MockInterface_Expecter) GetLockedNotesClipPaths() *MockInterface_GetLockedNotesClipPaths_Call {
	return &MockInterface_GetLockedNotesClipPaths_Call{Call: _e.mock.On("GetLockedNotesClipPaths")}
}

func (_c *MockInterface_GetLockedNotesClipPaths_Call) Run(run func()) *MockInterface_GetLockedNotesClipPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_GetLockedNotesClipPaths_Call) Return(_a0 []string, _a1 error) *MockInterface_GetLockedNotesClipPaths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetLockedNotesClipPaths_Call) RunAndReturn(run func() ([]string, error)) *MockInterface_GetLockedNotesClipPaths_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewSpeciesDetections provides a mock function with given fields: ctx, startDate, endDate, limit, offset
func (_m *MockInterface) GetNewSpeciesDetections(ctx context.Context, startDate string, endDate string, limit int, offset int) ([]datastore.NewSpeciesData, error) {
	ret := _m.Called(ctx, startDate, endDate, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetNewSpeciesDetections")
	}

	var r0 []datastore.NewSpeciesData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) ([]datastore.NewSpeciesData, error)); ok {
		return rf(ctx, startDate, endDate, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) []datastore.NewSpeciesData); ok {
		r0 = rf(ctx, startDate, endDate, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.NewSpeciesData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = rf(ctx, startDate, endDate, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetNewSpeciesDetections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewSpeciesDetections'
type MockInterface_GetNewSpeciesDetections_Call struct {
	*mock.Call
}

// GetNewSpeciesDetections is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate string
//   - endDate string
//   - limit int
//   - offset int
func (_e *MockInterface_Expecter) GetNewSpeciesDetections(ctx interface{}, startDate interface{}, endDate interface{}, limit interface{}, offset interface{}) *MockInterface_GetNewSpeciesDetections_Call {
	return &MockInterface_GetNewSpeciesDetections_Call{Call: _e.mock.On("GetNewSpeciesDetections", ctx, startDate, endDate, limit, offset)}
}

func (_c *MockInterface_GetNewSpeciesDetections_Call) Run(run func(ctx context.Context, startDate string, endDate string, limit int, offset int)) *MockInterface_GetNewSpeciesDetections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockInterface_GetNewSpeciesDetections_Call) Return(_a0 []datastore.NewSpeciesData, _a1 error) *MockInterface_GetNewSpeciesDetections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetNewSpeciesDetections_Call) RunAndReturn(run func(context.Context, string, string, int, int) ([]datastore.NewSpeciesData, error)) *MockInterface_GetNewSpeciesDetections_Call {
	_c.Call.Return(run)
	return _c
}

// GetNoteClipPath provides a mock function with given fields: noteID
func (_m *MockInterface) GetNoteClipPath(noteID string) (string, error) {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for GetNoteClipPath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetNoteClipPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNoteClipPath'
type MockInterface_GetNoteClipPath_Call struct {
	*mock.Call
}

// GetNoteClipPath is a helper method to define mock.On call
//   - noteID string
func (_e *MockInterface_Expecter) GetNoteClipPath(noteID interface{}) *MockInterface_GetNoteClipPath_Call {
	return &MockInterface_GetNoteClipPath_Call{Call: _e.mock.On("GetNoteClipPath", noteID)}
}

func (_c *MockInterface_GetNoteClipPath_Call) Run(run func(noteID string)) *MockInterface_GetNoteClipPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetNoteClipPath_Call) Return(_a0 string, _a1 error) *MockInterface_GetNoteClipPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetNoteClipPath_Call) RunAndReturn(run func(string) (string, error)) *MockInterface_GetNoteClipPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetNoteComments provides a mock function with given fields: noteID
func (_m *MockInterface) GetNoteComments(noteID string) ([]datastore.NoteComment, error) {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for GetNoteComments")
	}

	var r0 []datastore.NoteComment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]datastore.NoteComment, error)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(string) []datastore.NoteComment); ok {
		r0 = rf(noteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.NoteComment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetNoteComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNoteComments'
type MockInterface_GetNoteComments_Call struct {
	*mock.Call
}

// GetNoteComments is a helper method to define mock.On call
//   - noteID string
func (_e *MockInterface_Expecter) GetNoteComments(noteID interface{}) *MockInterface_GetNoteComments_Call {
	return &MockInterface_GetNoteComments_Call{Call: _e.mock.On("GetNoteComments", noteID)}
}

func (_c *MockInterface_GetNoteComments_Call) Run(run func(noteID string)) *MockInterface_GetNoteComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetNoteComments_Call) Return(_a0 []datastore.NoteComment, _a1 error) *MockInterface_GetNoteComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetNoteComments_Call) RunAndReturn(run func(string) ([]datastore.NoteComment, error)) *MockInterface_GetNoteComments_Call {
	_c.Call.Return(run)
	return _c
}

// GetNoteLock provides a mock function with given fields: noteID
func (_m *MockInterface) GetNoteLock(noteID string) (*datastore.NoteLock, error) {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for GetNoteLock")
	}

	var r0 *datastore.NoteLock
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*datastore.NoteLock, error)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(string) *datastore.NoteLock); ok {
		r0 = rf(noteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.NoteLock)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetNoteLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNoteLock'
type MockInterface_GetNoteLock_Call struct {
	*mock.Call
}

// GetNoteLock is a helper method to define mock.On call
//   - noteID string
func (_e *MockInterface_Expecter) GetNoteLock(noteID interface{}) *MockInterface_GetNoteLock_Call {
	return &MockInterface_GetNoteLock_Call{Call: _e.mock.On("GetNoteLock", noteID)}
}

func (_c *MockInterface_GetNoteLock_Call) Run(run func(noteID string)) *MockInterface_GetNoteLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetNoteLock_Call) Return(_a0 *datastore.NoteLock, _a1 error) *MockInterface_GetNoteLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetNoteLock_Call) RunAndReturn(run func(string) (*datastore.NoteLock, error)) *MockInterface_GetNoteLock_Call {
	_c.Call.Return(run)
	return _c
}

// GetNoteReview provides a mock function with given fields: noteID
func (_m *MockInterface) GetNoteReview(noteID string) (*datastore.NoteReview, error) {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for GetNoteReview")
	}

	var r0 *datastore.NoteReview
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*datastore.NoteReview, error)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(string) *datastore.NoteReview); ok {
		r0 = rf(noteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.NoteReview)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetNoteReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNoteReview'
type MockInterface_GetNoteReview_Call struct {
	*mock.Call
}

// GetNoteReview is a helper method to define mock.On call
//   - noteID string
func (_e *MockInterface_Expecter) GetNoteReview(noteID interface{}) *MockInterface_GetNoteReview_Call {
	return &MockInterface_GetNoteReview_Call{Call: _e.mock.On("GetNoteReview", noteID)}
}

func (_c *MockInterface_GetNoteReview_Call) Run(run func(noteID string)) *MockInterface_GetNoteReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetNoteReview_Call) Return(_a0 *datastore.NoteReview, _a1 error) *MockInterface_GetNoteReview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetNoteReview_Call) RunAndReturn(run func(string) (*datastore.NoteReview, error)) *MockInterface_GetNoteReview_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationHistory provides a mock function with given fields: scientificName, notificationType
func (_m *MockInterface) GetNotificationHistory(scientificName string, notificationType string) (*datastore.NotificationHistory, error) {
	ret := _m.Called(scientificName, notificationType)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationHistory")
	}

	var r0 *datastore.NotificationHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*datastore.NotificationHistory, error)); ok {
		return rf(scientificName, notificationType)
	}
	if rf, ok := ret.Get(0).(func(string, string) *datastore.NotificationHistory); ok {
		r0 = rf(scientificName, notificationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.NotificationHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(scientificName, notificationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetNotificationHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationHistory'
type MockInterface_GetNotificationHistory_Call struct {
	*mock.Call
}

// GetNotificationHistory is a helper method to define mock.On call
//   - scientificName string
//   - notificationType string
func (_e *MockInterface_Expecter) GetNotificationHistory(scientificName interface{}, notificationType interface{}) *MockInterface_GetNotificationHistory_Call {
	return &MockInterface_GetNotificationHistory_Call{Call: _e.mock.On("GetNotificationHistory", scientificName, notificationType)}
}

func (_c *MockInterface_GetNotificationHistory_Call) Run(run func(scientificName string, notificationType string)) *MockInterface_GetNotificationHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_GetNotificationHistory_Call) Return(_a0 *datastore.NotificationHistory, _a1 error) *MockInterface_GetNotificationHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetNotificationHistory_Call) RunAndReturn(run func(string, string) (*datastore.NotificationHistory, error)) *MockInterface_GetNotificationHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpeciesFirstDetectionInPeriod provides a mock function with given fields: ctx, startDate, endDate, limit, offset
func (_m *MockInterface) GetSpeciesFirstDetectionInPeriod(ctx context.Context, startDate string, endDate string, limit int, offset int) ([]datastore.NewSpeciesData, error) {
	ret := _m.Called(ctx, startDate, endDate, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetSpeciesFirstDetectionInPeriod")
	}

	var r0 []datastore.NewSpeciesData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) ([]datastore.NewSpeciesData, error)); ok {
		return rf(ctx, startDate, endDate, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) []datastore.NewSpeciesData); ok {
		r0 = rf(ctx, startDate, endDate, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.NewSpeciesData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = rf(ctx, startDate, endDate, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetSpeciesFirstDetectionInPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpeciesFirstDetectionInPeriod'
type MockInterface_GetSpeciesFirstDetectionInPeriod_Call struct {
	*mock.Call
}

// GetSpeciesFirstDetectionInPeriod is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate string
//   - endDate string
//   - limit int
//   - offset int
func (_e *MockInterface_Expecter) GetSpeciesFirstDetectionInPeriod(ctx interface{}, startDate interface{}, endDate interface{}, limit interface{}, offset interface{}) *MockInterface_GetSpeciesFirstDetectionInPeriod_Call {
	return &MockInterface_GetSpeciesFirstDetectionInPeriod_Call{Call: _e.mock.On("GetSpeciesFirstDetectionInPeriod", ctx, startDate, endDate, limit, offset)}
}

func (_c *MockInterface_GetSpeciesFirstDetectionInPeriod_Call) Run(run func(ctx context.Context, startDate string, endDate string, limit int, offset int)) *MockInterface_GetSpeciesFirstDetectionInPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockInterface_GetSpeciesFirstDetectionInPeriod_Call) Return(_a0 []datastore.NewSpeciesData, _a1 error) *MockInterface_GetSpeciesFirstDetectionInPeriod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetSpeciesFirstDetectionInPeriod_Call) RunAndReturn(run func(context.Context, string, string, int, int) ([]datastore.NewSpeciesData, error)) *MockInterface_GetSpeciesFirstDetectionInPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpeciesSummaryData provides a mock function with given fields: ctx, startDate, endDate
func (_m *MockInterface) GetSpeciesSummaryData(ctx context.Context, startDate string, endDate string) ([]datastore.SpeciesSummaryData, error) {
	ret := _m.Called(ctx, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetSpeciesSummaryData")
	}

	var r0 []datastore.SpeciesSummaryData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]datastore.SpeciesSummaryData, error)); ok {
		return rf(ctx, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []datastore.SpeciesSummaryData); ok {
		r0 = rf(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.SpeciesSummaryData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetSpeciesSummaryData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpeciesSummaryData'
type MockInterface_GetSpeciesSummaryData_Call struct {
	*mock.Call
}

// GetSpeciesSummaryData is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate string
//   - endDate string
func (_e *MockInterface_Expecter) GetSpeciesSummaryData(ctx interface{}, startDate interface{}, endDate interface{}) *MockInterface_GetSpeciesSummaryData_Call {
	return &MockInterface_GetSpeciesSummaryData_Call{Call: _e.mock.On("GetSpeciesSummaryData", ctx, startDate, endDate)}
}

func (_c *MockInterface_GetSpeciesSummaryData_Call) Run(run func(ctx context.Context, startDate string, endDate string)) *MockInterface_GetSpeciesSummaryData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockInterface_GetSpeciesSummaryData_Call) Return(_a0 []datastore.SpeciesSummaryData, _a1 error) *MockInterface_GetSpeciesSummaryData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetSpeciesSummaryData_Call) RunAndReturn(run func(context.Context, string, string) ([]datastore.SpeciesSummaryData, error)) *MockInterface_GetSpeciesSummaryData_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopBirdsData provides a mock function with given fields: selectedDate, minConfidenceNormalized
func (_m *MockInterface) GetTopBirdsData(selectedDate string, minConfidenceNormalized float64) ([]datastore.Note, error) {
	ret := _m.Called(selectedDate, minConfidenceNormalized)

	if len(ret) == 0 {
		panic("no return value specified for GetTopBirdsData")
	}

	var r0 []datastore.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(string, float64) ([]datastore.Note, error)); ok {
		return rf(selectedDate, minConfidenceNormalized)
	}
	if rf, ok := ret.Get(0).(func(string, float64) []datastore.Note); ok {
		r0 = rf(selectedDate, minConfidenceNormalized)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(string, float64) error); ok {
		r1 = rf(selectedDate, minConfidenceNormalized)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetTopBirdsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopBirdsData'
type MockInterface_GetTopBirdsData_Call struct {
	*mock.Call
}

// GetTopBirdsData is a helper method to define mock.On call
//   - selectedDate string
//   - minConfidenceNormalized float64
func (_e *MockInterface_Expecter) GetTopBirdsData(selectedDate interface{}, minConfidenceNormalized interface{}) *MockInterface_GetTopBirdsData_Call {
	return &MockInterface_GetTopBirdsData_Call{Call: _e.mock.On("GetTopBirdsData", selectedDate, minConfidenceNormalized)}
}

func (_c *MockInterface_GetTopBirdsData_Call) Run(run func(selectedDate string, minConfidenceNormalized float64)) *MockInterface_GetTopBirdsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64))
	})
	return _c
}

func (_c *MockInterface_GetTopBirdsData_Call) Return(_a0 []datastore.Note, _a1 error) *MockInterface_GetTopBirdsData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetTopBirdsData_Call) RunAndReturn(run func(string, float64) ([]datastore.Note, error)) *MockInterface_GetTopBirdsData_Call {
	_c.Call.Return(run)
	return _c
}

// IsNoteLocked provides a mock function with given fields: noteID
func (_m *MockInterface) IsNoteLocked(noteID string) (bool, error) {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for IsNoteLocked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_IsNoteLocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNoteLocked'
type MockInterface_IsNoteLocked_Call struct {
	*mock.Call
}

// IsNoteLocked is a helper method to define mock.On call
//   - noteID string
func (_e *MockInterface_Expecter) IsNoteLocked(noteID interface{}) *MockInterface_IsNoteLocked_Call {
	return &MockInterface_IsNoteLocked_Call{Call: _e.mock.On("IsNoteLocked", noteID)}
}

func (_c *MockInterface_IsNoteLocked_Call) Run(run func(noteID string)) *MockInterface_IsNoteLocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_IsNoteLocked_Call) Return(_a0 bool, _a1 error) *MockInterface_IsNoteLocked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_IsNoteLocked_Call) RunAndReturn(run func(string) (bool, error)) *MockInterface_IsNoteLocked_Call {
	_c.Call.Return(run)
	return _c
}

// LatestHourlyWeather provides a mock function with no fields
func (_m *MockInterface) LatestHourlyWeather() (*datastore.HourlyWeather, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestHourlyWeather")
	}

	var r0 *datastore.HourlyWeather
	var r1 error
	if rf, ok := ret.Get(0).(func() (*datastore.HourlyWeather, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *datastore.HourlyWeather); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.HourlyWeather)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_LatestHourlyWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestHourlyWeather'
type MockInterface_LatestHourlyWeather_Call struct {
	*mock.Call
}

// LatestHourlyWeather is a helper method to define mock.On call
func (_e *MockInterface_Expecter) LatestHourlyWeather() *MockInterface_LatestHourlyWeather_Call {
	return &MockInterface_LatestHourlyWeather_Call{Call: _e.mock.On("LatestHourlyWeather")}
}

func (_c *MockInterface_LatestHourlyWeather_Call) Run(run func()) *MockInterface_LatestHourlyWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_LatestHourlyWeather_Call) Return(_a0 *datastore.HourlyWeather, _a1 error) *MockInterface_LatestHourlyWeather_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_LatestHourlyWeather_Call) RunAndReturn(run func() (*datastore.HourlyWeather, error)) *MockInterface_LatestHourlyWeather_Call {
	_c.Call.Return(run)
	return _c
}

// LockNote provides a mock function with given fields: noteID
func (_m *MockInterface) LockNote(noteID string) error {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for LockNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_LockNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockNote'
type MockInterface_LockNote_Call struct {
	*mock.Call
}

// LockNote is a helper method to define mock.On call
//   - noteID string
func (_e *MockInterface_Expecter) LockNote(noteID interface{}) *MockInterface_LockNote_Call {
	return &MockInterface_LockNote_Call{Call: _e.mock.On("LockNote", noteID)}
}

func (_c *MockInterface_LockNote_Call) Run(run func(noteID string)) *MockInterface_LockNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_LockNote_Call) Return(_a0 error) *MockInterface_LockNote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_LockNote_Call) RunAndReturn(run func(string) error) *MockInterface_LockNote_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with no fields
func (_m *MockInterface) Open() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockInterface_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Open() *MockInterface_Open_Call {
	return &MockInterface_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *MockInterface_Open_Call) Run(run func()) *MockInterface_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Open_Call) Return(_a0 error) *MockInterface_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Open_Call) RunAndReturn(run func() error) *MockInterface_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Optimize provides a mock function with given fields: ctx
func (_m *MockInterface) Optimize(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Optimize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Optimize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Optimize'
type MockInterface_Optimize_Call struct {
	*mock.Call
}

// Optimize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInterface_Expecter) Optimize(ctx interface{}) *MockInterface_Optimize_Call {
	return &MockInterface_Optimize_Call{Call: _e.mock.On("Optimize", ctx)}
}

func (_c *MockInterface_Optimize_Call) Run(run func(ctx context.Context)) *MockInterface_Optimize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInterface_Optimize_Call) Return(_a0 error) *MockInterface_Optimize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Optimize_Call) RunAndReturn(run func(context.Context) error) *MockInterface_Optimize_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: note, results
func (_m *MockInterface) Save(note *datastore.Note, results []datastore.Results) error {
	ret := _m.Called(note, results)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.Note, []datastore.Results) error); ok {
		r0 = rf(note, results)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockInterface_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - note *datastore.Note
//   - results []datastore.Results
func (_e *MockInterface_Expecter) Save(note interface{}, results interface{}) *MockInterface_Save_Call {
	return &MockInterface_Save_Call{Call: _e.mock.On("Save", note, results)}
}

func (_c *MockInterface_Save_Call) Run(run func(note *datastore.Note, results []datastore.Results)) *MockInterface_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.Note), args[1].([]datastore.Results))
	})
	return _c
}

func (_c *MockInterface_Save_Call) Return(_a0 error) *MockInterface_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Save_Call) RunAndReturn(run func(*datastore.Note, []datastore.Results) error) *MockInterface_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveDailyEvents provides a mock function with given fields: dailyEvents
func (_m *MockInterface) SaveDailyEvents(dailyEvents *datastore.DailyEvents) error {
	ret := _m.Called(dailyEvents)

	if len(ret) == 0 {
		panic("no return value specified for SaveDailyEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.DailyEvents) error); ok {
		r0 = rf(dailyEvents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SaveDailyEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveDailyEvents'
type MockInterface_SaveDailyEvents_Call struct {
	*mock.Call
}

// SaveDailyEvents is a helper method to define mock.On call
//   - dailyEvents *datastore.DailyEvents
func (_e *MockInterface_Expecter) SaveDailyEvents(dailyEvents interface{}) *MockInterface_SaveDailyEvents_Call {
	return &MockInterface_SaveDailyEvents_Call{Call: _e.mock.On("SaveDailyEvents", dailyEvents)}
}

func (_c *MockInterface_SaveDailyEvents_Call) Run(run func(dailyEvents *datastore.DailyEvents)) *MockInterface_SaveDailyEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.DailyEvents))
	})
	return _c
}

func (_c *MockInterface_SaveDailyEvents_Call) Return(_a0 error) *MockInterface_SaveDailyEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SaveDailyEvents_Call) RunAndReturn(run func(*datastore.DailyEvents) error) *MockInterface_SaveDailyEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SaveDynamicThreshold provides a mock function with given fields: threshold
func (_m *MockInterface) SaveDynamicThreshold(threshold *datastore.DynamicThreshold) error {
	ret := _m.Called(threshold)

	if len(ret) == 0 {
		panic("no return value specified for SaveDynamicThreshold")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.DynamicThreshold) error); ok {
		r0 = rf(threshold)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SaveDynamicThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveDynamicThreshold'
type MockInterface_SaveDynamicThreshold_Call struct {
	*mock.Call
}

// SaveDynamicThreshold is a helper method to define mock.On call
//   - threshold *datastore.DynamicThreshold
func (_e *MockInterface_Expecter) SaveDynamicThreshold(threshold interface{}) *MockInterface_SaveDynamicThreshold_Call {
	return &MockInterface_SaveDynamicThreshold_Call{Call: _e.mock.On("SaveDynamicThreshold", threshold)}
}

func (_c *MockInterface_SaveDynamicThreshold_Call) Run(run func(threshold *datastore.DynamicThreshold)) *MockInterface_SaveDynamicThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.DynamicThreshold))
	})
	return _c
}

func (_c *MockInterface_SaveDynamicThreshold_Call) Return(_a0 error) *MockInterface_SaveDynamicThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SaveDynamicThreshold_Call) RunAndReturn(run func(*datastore.DynamicThreshold) error) *MockInterface_SaveDynamicThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// SaveHourlyWeather provides a mock function with given fields: hourlyWeather
func (_m *MockInterface) SaveHourlyWeather(hourlyWeather *datastore.HourlyWeather) error {
	ret := _m.Called(hourlyWeather)

	if len(ret) == 0 {
		panic("no return value specified for SaveHourlyWeather")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.HourlyWeather) error); ok {
		r0 = rf(hourlyWeather)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SaveHourlyWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveHourlyWeather'
type MockInterface_SaveHourlyWeather_Call struct {
	*mock.Call
}

// SaveHourlyWeather is a helper method to define mock.On call
//   - hourlyWeather *datastore.HourlyWeather
func (_e *MockInterface_Expecter) SaveHourlyWeather(hourlyWeather interface{}) *MockInterface_SaveHourlyWeather_Call {
	return &MockInterface_SaveHourlyWeather_Call{Call: _e.mock.On("SaveHourlyWeather", hourlyWeather)}
}

func (_c *MockInterface_SaveHourlyWeather_Call) Run(run func(hourlyWeather *datastore.HourlyWeather)) *MockInterface_SaveHourlyWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.HourlyWeather))
	})
	return _c
}

func (_c *MockInterface_SaveHourlyWeather_Call) Return(_a0 error) *MockInterface_SaveHourlyWeather_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SaveHourlyWeather_Call) RunAndReturn(run func(*datastore.HourlyWeather) error) *MockInterface_SaveHourlyWeather_Call {
	_c.Call.Return(run)
	return _c
}

// SaveImageCache provides a mock function with given fields: cache
func (_m *MockInterface) SaveImageCache(cache *datastore.ImageCache) error {
	ret := _m.Called(cache)

	if len(ret) == 0 {
		panic("no return value specified for SaveImageCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.ImageCache) error); ok {
		r0 = rf(cache)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SaveImageCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveImageCache'
type MockInterface_SaveImageCache_Call struct {
	*mock.Call
}

// SaveImageCache is a helper method to define mock.On call
//   - cache *datastore.ImageCache
func (_e *MockInterface_Expecter) SaveImageCache(cache interface{}) *MockInterface_SaveImageCache_Call {
	return &MockInterface_SaveImageCache_Call{Call: _e.mock.On("SaveImageCache", cache)}
}

func (_c *MockInterface_SaveImageCache_Call) Run(run func(cache *datastore.ImageCache)) *MockInterface_SaveImageCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.ImageCache))
	})
	return _c
}

func (_c *MockInterface_SaveImageCache_Call) Return(_a0 error) *MockInterface_SaveImageCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SaveImageCache_Call) RunAndReturn(run func(*datastore.ImageCache) error) *MockInterface_SaveImageCache_Call {
	_c.Call.Return(run)
	return _c
}

// SaveNoteComment provides a mock function with given fields: comment
func (_m *MockInterface) SaveNoteComment(comment *datastore.NoteComment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for SaveNoteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.NoteComment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SaveNoteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNoteComment'
type MockInterface_SaveNoteComment_Call struct {
	*mock.Call
}

// SaveNoteComment is a helper method to define mock.On call
//   - comment *datastore.NoteComment
func (_e *MockInterface_Expecter) SaveNoteComment(comment interface{}) *MockInterface_SaveNoteComment_Call {
	return &MockInterface_SaveNoteComment_Call{Call: _e.mock.On("SaveNoteComment", comment)}
}

func (_c *MockInterface_SaveNoteComment_Call) Run(run func(comment *datastore.NoteComment)) *MockInterface_SaveNoteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.NoteComment))
	})
	return _c
}

func (_c *MockInterface_SaveNoteComment_Call) Return(_a0 error) *MockInterface_SaveNoteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SaveNoteComment_Call) RunAndReturn(run func(*datastore.NoteComment) error) *MockInterface_SaveNoteComment_Call {
	_c.Call.Return(run)
	return _c
}

// SaveNoteReview provides a mock function with given fields: review
func (_m *MockInterface) SaveNoteReview(review *datastore.NoteReview) error {
	ret := _m.Called(review)

	if len(ret) == 0 {
		panic("no return value specified for SaveNoteReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.NoteReview) error); ok {
		r0 = rf(review)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SaveNoteReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNoteReview'
type MockInterface_SaveNoteReview_Call struct {
	*mock.Call
}

// SaveNoteReview is a helper method to define mock.On call
//   - review *datastore.NoteReview
func (_e *MockInterface_Expecter) SaveNoteReview(review interface{}) *MockInterface_SaveNoteReview_Call {
	return &MockInterface_SaveNoteReview_Call{Call: _e.mock.On("SaveNoteReview", review)}
}

func (_c *MockInterface_SaveNoteReview_Call) Run(run func(review *datastore.NoteReview)) *MockInterface_SaveNoteReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.NoteReview))
	})
	return _c
}

func (_c *MockInterface_SaveNoteReview_Call) Return(_a0 error) *MockInterface_SaveNoteReview_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SaveNoteReview_Call) RunAndReturn(run func(*datastore.NoteReview) error) *MockInterface_SaveNoteReview_Call {
	_c.Call.Return(run)
	return _c
}

// SaveNotificationHistory provides a mock function with given fields: history
func (_m *MockInterface) SaveNotificationHistory(history *datastore.NotificationHistory) error {
	ret := _m.Called(history)

	if len(ret) == 0 {
		panic("no return value specified for SaveNotificationHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.NotificationHistory) error); ok {
		r0 = rf(history)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SaveNotificationHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNotificationHistory'
type MockInterface_SaveNotificationHistory_Call struct {
	*mock.Call
}

// SaveNotificationHistory is a helper method to define mock.On call
//   - history *datastore.NotificationHistory
func (_e *MockInterface_Expecter) SaveNotificationHistory(history interface{}) *MockInterface_SaveNotificationHistory_Call {
	return &MockInterface_SaveNotificationHistory_Call{Call: _e.mock.On("SaveNotificationHistory", history)}
}

func (_c *MockInterface_SaveNotificationHistory_Call) Run(run func(history *datastore.NotificationHistory)) *MockInterface_SaveNotificationHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.NotificationHistory))
	})
	return _c
}

func (_c *MockInterface_SaveNotificationHistory_Call) Return(_a0 error) *MockInterface_SaveNotificationHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SaveNotificationHistory_Call) RunAndReturn(run func(*datastore.NotificationHistory) error) *MockInterface_SaveNotificationHistory_Call {
	_c.Call.Return(run)
	return _c
}

// SearchDetections provides a mock function with given fields: filters
func (_m *MockInterface) SearchDetections(filters *datastore.SearchFilters) ([]datastore.DetectionRecord, int, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for SearchDetections")
	}

	var r0 []datastore.DetectionRecord
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*datastore.SearchFilters) ([]datastore.DetectionRecord, int, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(*datastore.SearchFilters) []datastore.DetectionRecord); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.DetectionRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(*datastore.SearchFilters) int); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*datastore.SearchFilters) error); ok {
		r2 = rf(filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockInterface_SearchDetections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchDetections'
type MockInterface_SearchDetections_Call struct {
	*mock.Call
}

// SearchDetections is a helper method to define mock.On call
//   - filters *datastore.SearchFilters
func (_e *MockInterface_Expecter) SearchDetections(filters interface{}) *MockInterface_SearchDetections_Call {
	return &MockInterface_SearchDetections_Call{Call: _e.mock.On("SearchDetections", filters)}
}

func (_c *MockInterface_SearchDetections_Call) Run(run func(filters *datastore.SearchFilters)) *MockInterface_SearchDetections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.SearchFilters))
	})
	return _c
}

func (_c *MockInterface_SearchDetections_Call) Return(_a0 []datastore.DetectionRecord, _a1 int, _a2 error) *MockInterface_SearchDetections_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockInterface_SearchDetections_Call) RunAndReturn(run func(*datastore.SearchFilters) ([]datastore.DetectionRecord, int, error)) *MockInterface_SearchDetections_Call {
	_c.Call.Return(run)
	return _c
}

// SearchNotes provides a mock function with given fields: query, sortAscending, limit, offset
func (_m *MockInterface) SearchNotes(query string, sortAscending bool, limit int, offset int) ([]datastore.Note, error) {
	ret := _m.Called(query, sortAscending, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchNotes")
	}

	var r0 []datastore.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool, int, int) ([]datastore.Note, error)); ok {
		return rf(query, sortAscending, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, bool, int, int) []datastore.Note); ok {
		r0 = rf(query, sortAscending, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool, int, int) error); ok {
		r1 = rf(query, sortAscending, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_SearchNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchNotes'
type MockInterface_SearchNotes_Call struct {
	*mock.Call
}

// SearchNotes is a helper method to define mock.On call
//   - query string
//   - sortAscending bool
//   - limit int
//   - offset int
func (_e *MockInterface_Expecter) SearchNotes(query interface{}, sortAscending interface{}, limit interface{}, offset interface{}) *MockInterface_SearchNotes_Call {
	return &MockInterface_SearchNotes_Call{Call: _e.mock.On("SearchNotes", query, sortAscending, limit, offset)}
}

func (_c *MockInterface_SearchNotes_Call) Run(run func(query string, sortAscending bool, limit int, offset int)) *MockInterface_SearchNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockInterface_SearchNotes_Call) Return(_a0 []datastore.Note, _a1 error) *MockInterface_SearchNotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_SearchNotes_Call) RunAndReturn(run func(string, bool, int, int) ([]datastore.Note, error)) *MockInterface_SearchNotes_Call {
	_c.Call.Return(run)
	return _c
}

// SearchNotesAdvanced provides a mock function with given fields: filters
func (_m *MockInterface) SearchNotesAdvanced(filters *datastore.AdvancedSearchFilters) ([]datastore.Note, int64, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for SearchNotesAdvanced")
	}

	var r0 []datastore.Note
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*datastore.AdvancedSearchFilters) ([]datastore.Note, int64, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(*datastore.AdvancedSearchFilters) []datastore.Note); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(*datastore.AdvancedSearchFilters) int64); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(*datastore.AdvancedSearchFilters) error); ok {
		r2 = rf(filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockInterface_SearchNotesAdvanced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchNotesAdvanced'
type MockInterface_SearchNotesAdvanced_Call struct {
	*mock.Call
}

// SearchNotesAdvanced is a helper method to define mock.On call
//   - filters *datastore.AdvancedSearchFilters
func (_e *MockInterface_Expecter) SearchNotesAdvanced(filters interface{}) *MockInterface_SearchNotesAdvanced_Call {
	return &MockInterface_SearchNotesAdvanced_Call{Call: _e.mock.On("SearchNotesAdvanced", filters)}
}

func (_c *MockInterface_SearchNotesAdvanced_Call) Run(run func(filters *datastore.AdvancedSearchFilters)) *MockInterface_SearchNotesAdvanced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*datastore.AdvancedSearchFilters))
	})
	return _c
}

func (_c *MockInterface_SearchNotesAdvanced_Call) Return(_a0 []datastore.Note, _a1 int64, _a2 error) *MockInterface_SearchNotesAdvanced_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockInterface_SearchNotesAdvanced_Call) RunAndReturn(run func(*datastore.AdvancedSearchFilters) ([]datastore.Note, int64, error)) *MockInterface_SearchNotesAdvanced_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetrics provides a mock function with given fields: _a0
func (_m *MockInterface) SetMetrics(_a0 *metrics.DatastoreMetrics) {
	_m.Called(_a0)
}

// MockInterface_SetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetrics'
type MockInterface_SetMetrics_Call struct {
	*mock.Call
}

// SetMetrics is a helper method to define mock.On call
//   - _a0 *metrics.DatastoreMetrics
func (_e *MockInterface_Expecter) SetMetrics(_a0 interface{}) *MockInterface_SetMetrics_Call {
	return &MockInterface_SetMetrics_Call{Call: _e.mock.On("SetMetrics", _a0)}
}

func (_c *MockInterface_SetMetrics_Call) Run(run func(_a0 *metrics.DatastoreMetrics)) *MockInterface_SetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metrics.DatastoreMetrics))
	})
	return _c
}

func (_c *MockInterface_SetMetrics_Call) Return() *MockInterface_SetMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_SetMetrics_Call) RunAndReturn(run func(*metrics.DatastoreMetrics)) *MockInterface_SetMetrics_Call {
	_c.Run(run)
	return _c
}

// SetSunCalcMetrics provides a mock function with given fields: suncalcMetrics
func (_m *MockInterface) SetSunCalcMetrics(suncalcMetrics interface{}) {
	_m.Called(suncalcMetrics)
}

// MockInterface_SetSunCalcMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSunCalcMetrics'
type MockInterface_SetSunCalcMetrics_Call struct {
	*mock.Call
}

// SetSunCalcMetrics is a helper method to define mock.On call
//   - suncalcMetrics interface{}
func (_e *MockInterface_Expecter) SetSunCalcMetrics(suncalcMetrics interface{}) *MockInterface_SetSunCalcMetrics_Call {
	return &MockInterface_SetSunCalcMetrics_Call{Call: _e.mock.On("SetSunCalcMetrics", suncalcMetrics)}
}

func (_c *MockInterface_SetSunCalcMetrics_Call) Run(run func(suncalcMetrics interface{})) *MockInterface_SetSunCalcMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockInterface_SetSunCalcMetrics_Call) Return() *MockInterface_SetSunCalcMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_SetSunCalcMetrics_Call) RunAndReturn(run func(interface{})) *MockInterface_SetSunCalcMetrics_Call {
	_c.Run(run)
	return _c
}

// SpeciesDetections provides a mock function with given fields: species, date, hour, duration, sortAscending, limit, offset
func (_m *MockInterface) SpeciesDetections(species string, date string, hour string, duration int, sortAscending bool, limit int, offset int) ([]datastore.Note, error) {
	ret := _m.Called(species, date, hour, duration, sortAscending, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SpeciesDetections")
	}

	var r0 []datastore.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, bool, int, int) ([]datastore.Note, error)); ok {
		return rf(species, date, hour, duration, sortAscending, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, bool, int, int) []datastore.Note); ok {
		r0 = rf(species, date, hour, duration, sortAscending, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, bool, int, int) error); ok {
		r1 = rf(species, date, hour, duration, sortAscending, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_SpeciesDetections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpeciesDetections'
type MockInterface_SpeciesDetections_Call struct {
	*mock.Call
}

// SpeciesDetections is a helper method to define mock.On call
//   - species string
//   - date string
//   - hour string
//   - duration int
//   - sortAscending bool
//   - limit int
//   - offset int
func (_e *MockInterface_Expecter) SpeciesDetections(species interface{}, date interface{}, hour interface{}, duration interface{}, sortAscending interface{}, limit interface{}, offset interface{}) *MockInterface_SpeciesDetections_Call {
	return &MockInterface_SpeciesDetections_Call{Call: _e.mock.On("SpeciesDetections", species, date, hour, duration, sortAscending, limit, offset)}
}

func (_c *MockInterface_SpeciesDetections_Call) Run(run func(species string, date string, hour string, duration int, sortAscending bool, limit int, offset int)) *MockInterface_SpeciesDetections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(int), args[4].(bool), args[5].(int), args[6].(int))
	})
	return _c
}

func (_c *MockInterface_SpeciesDetections_Call) Return(_a0 []datastore.Note, _a1 error) *MockInterface_SpeciesDetections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_SpeciesDetections_Call) RunAndReturn(run func(string, string, string, int, bool, int, int) ([]datastore.Note, error)) *MockInterface_SpeciesDetections_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: fc
func (_m *MockInterface) Transaction(fc func(*gorm.DB) error) error {
	ret := _m.Called(fc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(fc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockInterface_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fc func(*gorm.DB) error
func (_e *MockInterface_Expecter) Transaction(fc interface{}) *MockInterface_Transaction_Call {
	return &MockInterface_Transaction_Call{Call: _e.mock.On("Transaction", fc)}
}

func (_c *MockInterface_Transaction_Call) Run(run func(fc func(*gorm.DB) error)) *MockInterface_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *MockInterface_Transaction_Call) Return(_a0 error) *MockInterface_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *MockInterface_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// UnlockNote provides a mock function with given fields: noteID
func (_m *MockInterface) UnlockNote(noteID string) error {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for UnlockNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_UnlockNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlockNote'
type MockInterface_UnlockNote_Call struct {
	*mock.Call
}

// UnlockNote is a helper method to define mock.On call
//   - noteID string
func (_e *MockInterface_Expecter) UnlockNote(noteID interface{}) *MockInterface_UnlockNote_Call {
	return &MockInterface_UnlockNote_Call{Call: _e.mock.On("UnlockNote", noteID)}
}

func (_c *MockInterface_UnlockNote_Call) Run(run func(noteID string)) *MockInterface_UnlockNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_UnlockNote_Call) Return(_a0 error) *MockInterface_UnlockNote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_UnlockNote_Call) RunAndReturn(run func(string) error) *MockInterface_UnlockNote_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDynamicThresholdExpiry provides a mock function with given fields: speciesName, expiresAt
func (_m *MockInterface) UpdateDynamicThresholdExpiry(speciesName string, expiresAt time.Time) error {
	ret := _m.Called(speciesName, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDynamicThresholdExpiry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time) error); ok {
		r0 = rf(speciesName, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_UpdateDynamicThresholdExpiry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDynamicThresholdExpiry'
type MockInterface_UpdateDynamicThresholdExpiry_Call struct {
	*mock.Call
}

// UpdateDynamicThresholdExpiry is a helper method to define mock.On call
//   - speciesName string
//   - expiresAt time.Time
func (_e *MockInterface_Expecter) UpdateDynamicThresholdExpiry(speciesName interface{}, expiresAt interface{}) *MockInterface_UpdateDynamicThresholdExpiry_Call {
	return &MockInterface_UpdateDynamicThresholdExpiry_Call{Call: _e.mock.On("UpdateDynamicThresholdExpiry", speciesName, expiresAt)}
}

func (_c *MockInterface_UpdateDynamicThresholdExpiry_Call) Run(run func(speciesName string, expiresAt time.Time)) *MockInterface_UpdateDynamicThresholdExpiry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *MockInterface_UpdateDynamicThresholdExpiry_Call) Return(_a0 error) *MockInterface_UpdateDynamicThresholdExpiry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_UpdateDynamicThresholdExpiry_Call) RunAndReturn(run func(string, time.Time) error) *MockInterface_UpdateDynamicThresholdExpiry_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNoteComment provides a mock function with given fields: commentID, entry
func (_m *MockInterface) UpdateNoteComment(commentID string, entry string) error {
	ret := _m.Called(commentID, entry)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNoteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(commentID, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_UpdateNoteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNoteComment'
type MockInterface_UpdateNoteComment_Call struct {
	*mock.Call
}

// UpdateNoteComment is a helper method to define mock.On call
//   - commentID string
//   - entry string
func (_e *MockInterface_Expecter) UpdateNoteComment(commentID interface{}, entry interface{}) *MockInterface_UpdateNoteComment_Call {
	return &MockInterface_UpdateNoteComment_Call{Call: _e.mock.On("UpdateNoteComment", commentID, entry)}
}

func (_c *MockInterface_UpdateNoteComment_Call) Run(run func(commentID string, entry string)) *MockInterface_UpdateNoteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_UpdateNoteComment_Call) Return(_a0 error) *MockInterface_UpdateNoteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_UpdateNoteComment_Call) RunAndReturn(run func(string, string) error) *MockInterface_UpdateNoteComment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
